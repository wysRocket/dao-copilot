/**
 * Integration Test for Russian Transcription Correction System
 * Tests the complete system: Russian corrector + Mixed language detector + Grammar pattern corrector
 */

console.log('üß™ Russian Transcription Correction System - Integration Test');
console.log('=============================================================');

async function testIntegratedSystem() {
  try {
    // Import all components
    const { createRussianTranscriptionCorrector } = await import('./src/services/russian-transcription-corrector.ts');
    const { createMixedLanguageDetector } = await import('./src/services/mixed-language-detector.ts');
    const { createGrammarPatternCorrector } = await import('./src/services/grammar-pattern-corrector.ts');
    
    console.log('‚úÖ All corrector modules imported successfully');

    // Create the main corrector
    const corrector = createRussianTranscriptionCorrector({
      minConfidenceThreshold: 0.6,
      maxCorrectionsPerSentence: 10,
      enableLogging: true,
      enableWordBoundaryCorrection: true,
      enableTechnicalTermCorrection: true,
      enablePatternCorrection: true,
      enableMultipleWordCorrection: true
    });

    console.log('‚úÖ Russian transcription corrector initialized');

    // Test cases from production screenshot
    const productionTestCases = [
      {
        name: 'Mixed Language + Grammar Issues',
        input: '–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤—ã–±–∏—Ä–∞–µ—Ç–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –ö–æ–≥–¥–∞ –≤—ã –ø–æ–ø—Ä–æ–±—É–µ—Ç–µ –ø—Ä–∏–Ω–∏–º–∞–ª–∏ —Ä–µ—à–µ–Ω–∏–µ',
        expected: ['grammar corrections', 'mixed language detection']
      },
      {
        name: 'Word Boundary Issues',
        input: '—Å—Ç–∞–≤–∏ –ª–∏ —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –≤—ã—à–µ —á—É–∂–æ–≥–æ –∫–æ–º —Ñ–æ—Ä—Ç–∞',
        expected: ['word boundary fixes']
      },
      {
        name: 'Technical Terms + Grammar',
        input: '–ø—Ä–æ–≥—Ä–∞–º–∏—Ä–∞–ª–∞ –≤–∞—Å –í–æ—Å –º–æ–∂–Ω–æ –ø–æ–ª –Ω–æ—Å—Ç—å—é',
        expected: ['technical term correction', 'grammar fixes']
      },
      {
        name: 'Complex Fragmented Speech',
        input: '–Ω–µ —Ç–æ —á—Ç–æ —Ç–∞–º —Ç–æ –∫–æ–Ω–µ—á–Ω–æ –ù–æ –∫–æ–≥–¥–∞ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –∂–µ—Ç –±—ã—Ç—å',
        expected: ['sentence structure', 'conjunction fixes']
      }
    ];

    console.log(`\nüî¨ Testing ${productionTestCases.length} production scenarios`);
    console.log('-'.repeat(60));

    let successCount = 0;
    const allResults = [];

    for (let i = 0; i < productionTestCases.length; i++) {
      const testCase = productionTestCases[i];
      console.log(`\nTest ${i + 1}: ${testCase.name}`);
      console.log(`Input: "${testCase.input}"`);
      
      const startTime = Date.now();
      const result = await corrector.correct(testCase.input);
      const endTime = Date.now();
      
      console.log(`Output: "${result.correctedText}"`);
      console.log(`Corrections: ${result.corrections.length}`);
      console.log(`Time: ${endTime - startTime}ms`);
      console.log(`Confidence: ${(result.confidence * 100).toFixed(1)}%`);
      
      if (result.corrections.length > 0) {
        console.log('üìù Applied corrections:');
        result.corrections.forEach((correction, idx) => {
          console.log(`   ${idx + 1}. "${correction.original}" ‚Üí "${correction.corrected}" (${correction.type})`);
        });
      }
      
      // Check if corrections were applied
      const hasCorrections = result.corrections.length > 0;
      const textChanged = result.correctedText !== testCase.input;
      const processingFast = (endTime - startTime) < 200;
      
      if (hasCorrections && textChanged && processingFast) {
        console.log('‚úÖ TEST PASSED');
        successCount++;
      } else {
        console.log('‚ö†Ô∏è TEST PARTIAL');
      }
      
      allResults.push({
        ...result,
        processingTime: endTime - startTime
      });
    }

    // Test performance with longer text
    console.log('\nüìä Performance Test with Complex Text');
    console.log('-'.repeat(40));
    
    const complexText = `–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤—ã–±–∏—Ä–∞–µ—Ç–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –ö–æ–≥–¥–∞ –≤—ã –ø–æ–ø—Ä–æ–±—É–µ—Ç–µ –ø—Ä–∏–Ω–∏–º–∞–ª–∏ —Ä–µ—à–µ–Ω–∏–µ. –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Ç–æ —Ç–∞–∫–æ–π –¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç—å. –ö–æ–≥–¥–∞ –≤—ã –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ —Å—Ç–∞–≤–∏ –ª–∏ —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ –≤—ã—à–µ —á—É–∂–æ–≥–æ –∫–æ–º —Ñ–æ—Ä—Ç–∞. –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–ª–∞ –≤–∞—Å –í–æ—Å –º–æ–∂–Ω–æ, –≤—ã –±—É–¥–µ—Ç–µ —Å–µ –ª–µ–π–Ω—ã–º –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–æ–º, –æ–Ω–∏ –≤—Å–µ –≥–¥–µ –æ—Ç–≤–µ—á–∞–ª. —ç-—ç. –í—Å—ë –±—ã–ª–∏ —Å—á–∞—Å—Ç–ª–∏–≤—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –∂–µ—Ç –±—ã—Ç—å –Ω–µ –±—É–¥–µ—Ç. –ø–æ–ª –Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã.`;
    
    console.log(`Complex text length: ${complexText.length} characters`);
    
    const perfStart = Date.now();
    const complexResult = await corrector.correct(complexText);
    const perfEnd = Date.now();
    
    console.log(`Processing time: ${perfEnd - perfStart}ms`);
    console.log(`Corrections applied: ${complexResult.corrections.length}`);
    console.log(`Confidence: ${(complexResult.confidence * 100).toFixed(1)}%`);
    console.log(`Characters per ms: ${(complexText.length / (perfEnd - perfStart)).toFixed(2)}`);
    
    if (complexResult.corrections.length > 0) {
      console.log('üìù Sample corrections from complex text:');
      complexResult.corrections.slice(0, 5).forEach((correction, idx) => {
        console.log(`   ${idx + 1}. "${correction.original}" ‚Üí "${correction.corrected}" (${correction.type})`);
      });
      if (complexResult.corrections.length > 5) {
        console.log(`   ... and ${complexResult.corrections.length - 5} more corrections`);
      }
    }

    // Test individual components
    console.log('\nüîß Component Integration Test');
    console.log('-'.repeat(35));
    
    // Test mixed language detector
    const mixedDetector = createMixedLanguageDetector();
    const mixedTest = await mixedDetector.detectAndCorrect('programming –≤ —Ä–µ–∂–∏–º–µ real time testing');
    console.log(`Mixed language test: "${mixedTest.correctedText}" (${mixedTest.segments.length} segments)`);
    
    // Test grammar corrector
    const grammarCorrector = createGrammarPatternCorrector();
    const grammarTest = await grammarCorrector.correct('—Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–≥–¥–∞ –∂–µ—Ç –±—ã—Ç—å');
    console.log(`Grammar test: "${grammarTest.correctedText}" (${grammarTest.corrections.length} corrections)`);

    // Summary
    console.log('\nüìã Integration Test Summary');
    console.log('=' + '='.repeat(40));
    console.log(`Production tests passed: ${successCount}/${productionTestCases.length}`);
    console.log(`Average corrections per test: ${(allResults.reduce((sum, r) => sum + r.corrections.length, 0) / allResults.length).toFixed(1)}`);
    console.log(`Average processing time: ${(allResults.reduce((sum, r) => sum + r.processingTime, 0) / allResults.length).toFixed(1)}ms`);
    console.log(`Complex text processing: ${perfEnd - perfStart}ms for ${complexText.length} chars`);
    
    const overallSuccess = successCount >= productionTestCases.length * 0.7 && 
                          (perfEnd - perfStart) < 500 && 
                          complexResult.corrections.length > 5;
    
    if (overallSuccess) {
      console.log('\nüéâ INTEGRATION TEST: SUCCESS!');
      console.log('   ‚úÖ All three corrector components working');
      console.log('   ‚úÖ Production errors being addressed');
      console.log('   ‚úÖ Performance within acceptable limits');
      console.log('   ‚úÖ System ready for Task 11.3 completion');
    } else {
      console.log('\n‚ö†Ô∏è INTEGRATION TEST: NEEDS ATTENTION');
      console.log('   - Some components may need tuning');
      console.log('   - Performance optimization may be needed');
    }

    return overallSuccess;

  } catch (error) {
    console.error('‚ùå Integration test failed:', error);
    console.error('Stack trace:', error.stack);
    return false;
  }
}

// Run the test
if (import.meta.url === `file://${process.argv[1]}`) {
  console.log('üöÄ Russian Transcription System Integration Validation');
  console.log('üéØ Testing complete correction pipeline for production errors');
  console.log('');

  testIntegratedSystem()
    .then((success) => {
      if (success) {
        console.log('\nüéâ ALL INTEGRATION TESTS PASSED!');
        console.log('Task 11.3 - Grammar Pattern Corrector is ready!');
        process.exit(0);
      } else {
        console.log('\n‚ö†Ô∏è Integration issues need attention');
        process.exit(1);
      }
    })
    .catch(error => {
      console.error('\n‚ùå Integration test failed:', error);
      process.exit(1);
    });
}

export { testIntegratedSystem };