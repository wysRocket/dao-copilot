/**
 * Grammar Pattern Corrector
 *
 * This module provides grammar pattern corrections for Russian transcriptions
 * to fix common grammatical errors, sentence structure issues, and syntactic
 * problems that occur in speech-to-text systems.
 */

export interface GrammarPattern {
  pattern: RegExp
  replacement: string
  description: string
  category:
    | 'word_order'
    | 'verb_form'
    | 'case_correction'
    | 'preposition'
    | 'conjunction'
    | 'particle'
    | 'punctuation'
    | 'sentence_structure'
  confidence: number // 0.0-1.0
  conditions?: {
    // Optional conditions for when to apply the pattern
    contextBefore?: RegExp
    contextAfter?: RegExp
    wordCount?: {min?: number; max?: number}
  }
}

export interface GrammarCorrectionResult {
  originalText: string
  correctedText: string
  corrections: GrammarCorrectionDetail[]
  confidence: number
  processingTimeMs: number
}

export interface GrammarCorrectionDetail {
  type: 'grammar'
  category: string
  original: string
  corrected: string
  position: {start: number; end: number}
  confidence: number
  reason: string
  pattern: string
}

export interface GrammarCorrectionConfig {
  enableWordOrderCorrection: boolean
  enableVerbFormCorrection: boolean
  enableCaseCorrection: boolean
  enablePrepositionCorrection: boolean
  enableConjunctionCorrection: boolean
  enableParticleCorrection: boolean
  enablePunctuationCorrection: boolean
  enableSentenceStructureCorrection: boolean
  confidenceThreshold: number
  maxCorrectionsPerSentence: number
  preserveOriginalOnLowConfidence: boolean
  logCorrections: boolean
}

/**
 * Grammar Pattern Corrector class for Russian transcriptions
 */
export class GrammarPatternCorrector {
  private config: GrammarCorrectionConfig
  private patterns: GrammarPattern[] = []
  private correctionStats = {
    totalCorrections: 0,
    categoryStats: new Map<string, number>(),
    patternStats: new Map<string, number>()
  }

  constructor(config: Partial<GrammarCorrectionConfig> = {}) {
    this.config = {
      enableWordOrderCorrection: true,
      enableVerbFormCorrection: true,
      enableCaseCorrection: true,
      enablePrepositionCorrection: true,
      enableConjunctionCorrection: true,
      enableParticleCorrection: true,
      enablePunctuationCorrection: true,
      enableSentenceStructureCorrection: true,
      confidenceThreshold: 0.7,
      maxCorrectionsPerSentence: 5,
      preserveOriginalOnLowConfidence: true,
      logCorrections: false,
      ...config
    }

    this.initializeGrammarPatterns()
    console.log('üìù Grammar Pattern Corrector initialized with', this.patterns.length, 'patterns')
  }

  /**
   * Main grammar correction method
   */
  async correct(text: string): Promise<GrammarCorrectionResult> {
    const startTime = Date.now()
    const originalText = text
    let correctedText = text
    const corrections: GrammarCorrectionDetail[] = []

    try {
      // Process sentence by sentence to maintain context
      const sentences = this.splitIntoSentences(correctedText)
      const processedSentences: string[] = []

      for (const sentence of sentences) {
        const sentenceResult = await this.correctSentence(sentence.trim())
        processedSentences.push(sentenceResult.text)
        corrections.push(...sentenceResult.corrections)
      }

      correctedText = processedSentences.join(' ')

      // Calculate overall confidence
      const confidence =
        corrections.length > 0
          ? corrections.reduce((sum, c) => sum + c.confidence, 0) / corrections.length
          : 1.0

      const processingTime = Date.now() - startTime

      // Update statistics
      this.updateStats(corrections)

      if (this.config.logCorrections && corrections.length > 0) {
        console.log(
          `[GrammarPatternCorrector] Applied ${corrections.length} corrections in ${processingTime}ms`
        )
      }

      return {
        originalText,
        correctedText,
        corrections,
        confidence,
        processingTimeMs: processingTime
      }
    } catch (error) {
      console.error('Grammar pattern correction error:', error)
      return {
        originalText,
        correctedText: text,
        corrections: [],
        confidence: 1.0,
        processingTimeMs: Date.now() - startTime
      }
    }
  }

  /**
   * Correct a single sentence
   */
  private async correctSentence(
    sentence: string
  ): Promise<{text: string; corrections: GrammarCorrectionDetail[]}> {
    let correctedSentence = sentence
    const corrections: GrammarCorrectionDetail[] = []
    let correctionsApplied = 0

    for (const pattern of this.patterns) {
      if (correctionsApplied >= this.config.maxCorrectionsPerSentence) {
        break
      }

      // Check if this pattern category is enabled
      if (!this.isPatternCategoryEnabled(pattern.category)) {
        continue
      }

      // Check confidence threshold
      if (pattern.confidence < this.config.confidenceThreshold) {
        continue
      }

      // Check conditions if specified
      if (
        pattern.conditions &&
        !this.checkPatternConditions(correctedSentence, pattern.conditions)
      ) {
        continue
      }

      // Apply pattern
      const matches = [...correctedSentence.matchAll(pattern.pattern)]

      for (const match of matches) {
        if (match.index !== undefined) {
          const correction: GrammarCorrectionDetail = {
            type: 'grammar',
            category: pattern.category,
            original: match[0],
            corrected: pattern.replacement,
            position: {start: match.index, end: match.index + match[0].length},
            confidence: pattern.confidence,
            reason: pattern.description,
            pattern: pattern.pattern.source
          }

          corrections.push(correction)
          correctionsApplied++

          if (correctionsApplied >= this.config.maxCorrectionsPerSentence) {
            break
          }
        }
      }

      // Apply replacements
      correctedSentence = correctedSentence.replace(pattern.pattern, pattern.replacement)
    }

    return {text: correctedSentence, corrections}
  }

  /**
   * Initialize all grammar patterns based on common Russian transcription issues
   */
  private initializeGrammarPatterns(): void {
    // Clear existing patterns
    this.patterns = []

    // Word Order Corrections
    this.addWordOrderPatterns()

    // Verb Form Corrections
    this.addVerbFormPatterns()

    // Case Corrections
    this.addCasePatterns()

    // Preposition Corrections
    this.addPrepositionPatterns()

    // Conjunction and Particle Corrections
    this.addConjunctionPatterns()

    // Punctuation and Sentence Structure
    this.addSentenceStructurePatterns()

    // Production-specific patterns from screenshot analysis
    this.addProductionSpecificPatterns()

    // Advanced Russian grammar patterns for Task 7.3
    this.addAdvancedRussianPatterns()

    console.log(`üìö Initialized ${this.patterns.length} grammar patterns across categories`)
  }

  /**
   * Add word order correction patterns
   */
  private addWordOrderPatterns(): void {
    const patterns: GrammarPattern[] = [
      {
        pattern: /\b—Ç–æ–ª—å–∫–æ –¥–ª—è\s+(\w+)\b/g,
        replacement: '—Ç–æ–ª—å–∫–æ $1',
        description: 'Remove unnecessary "–¥–ª—è" in "—Ç–æ–ª—å–∫–æ –¥–ª—è"',
        category: 'word_order',
        confidence: 0.8
      },
      {
        pattern: /\b–≤—ã–±–∏—Ä–∞–µ—Ç–µ —Ç–æ–ª—å–∫–æ –¥–ª—è\s+(\w+)\b/g,
        replacement: '–≤—ã–±–∏—Ä–∞–µ—Ç–µ —Ç–æ–ª—å–∫–æ $1',
        description: 'Fix word order in "–≤—ã–±–∏—Ä–∞–µ—Ç–µ —Ç–æ–ª—å–∫–æ –¥–ª—è"',
        category: 'word_order',
        confidence: 0.9
      },
      {
        pattern: /\b–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤—ã–±–∏—Ä–∞–µ—Ç–µ —Ç–æ–ª—å–∫–æ –¥–ª—è\b/g,
        replacement: '–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤—ã–±–∏—Ä–∞–µ—Ç–µ —Ç–æ–ª—å–∫–æ',
        description: 'Remove inappropriate preposition usage',
        category: 'word_order',
        confidence: 0.85
      },
      {
        pattern: /\b–Ω–µ —Ç–æ —á—Ç–æ —Ç–∞–º —Ç–æ –∫–æ–Ω–µ—á–Ω–æ\b/g,
        replacement: '–Ω–µ —Ç–æ —á—Ç–æ —Ç–∞–º, –∫–æ–Ω–µ—á–Ω–æ',
        description: 'Add proper punctuation to fragmented speech',
        category: 'word_order',
        confidence: 0.7
      }
    ]

    this.patterns.push(...patterns)
  }

  /**
   * Add verb form correction patterns
   */
  private addVerbFormPatterns(): void {
    const patterns: GrammarPattern[] = [
      // Fix punctuation (existing)
      {
        pattern: /\b–±—ã–ª–∏ —á—Ç–æ\b/g,
        replacement: '–±—ã–ª–∏, —á—Ç–æ',
        description: 'Add proper punctuation after "–±—ã–ª–∏"',
        category: 'verb_form',
        confidence: 0.8
      },
      {
        pattern: /\b–ø–æ–Ω—è–ª–∏ –ª—é–¥–∏ –≤ —ç—â–µ –±—ã–ª–∏\b/g,
        replacement: '–ø–æ–Ω—è–ª–∏, –ª—é–¥–∏ –µ—â–µ –±—ã–ª–∏',
        description: 'Fix verb sequence and punctuation',
        category: 'verb_form',
        confidence: 0.75
      },
      {
        pattern: /\b—Å–µ –ª–µ–π–Ω—ã–º\b/g,
        replacement: '—Å–µ–º–µ–π–Ω—ã–º',
        description: 'Fix syllable boundary in "—Å–µ–º–µ–π–Ω—ã–º"',
        category: 'verb_form',
        confidence: 0.9
      },

      // Russian verb form corrections (Task 7.3 requirements)

      // Personal pronoun + infinitive errors
      {
        pattern: /\b—è –∏–¥—Ç–∏\b/g,
        replacement: '—è –∏–¥—É',
        description: 'Personal pronoun requires conjugated verb form, not infinitive',
        category: 'verb_form',
        confidence: 0.95
      },
      {
        pattern: /\b—Ç—ã –¥–µ–ª–∞—Ç—å\b/g,
        replacement: '—Ç—ã –¥–µ–ª–∞–µ—à—å',
        description: 'Personal pronoun requires conjugated verb form',
        category: 'verb_form',
        confidence: 0.95
      },
      {
        pattern: /\b–æ–Ω –≥–æ–≤–æ—Ä–∏—Ç—å\b/g,
        replacement: '–æ–Ω –≥–æ–≤–æ—Ä–∏—Ç',
        description: 'Personal pronoun requires conjugated verb form',
        category: 'verb_form',
        confidence: 0.95
      },
      {
        pattern: /\b–æ–Ω–∞ –ø–∏—Å–∞—Ç—å\b/g,
        replacement: '–æ–Ω–∞ –ø–∏—à–µ—Ç',
        description: 'Personal pronoun requires conjugated verb form',
        category: 'verb_form',
        confidence: 0.95
      },
      {
        pattern: /\b–º—ã —Ä–∞–±–æ—Ç–∞—Ç—å\b/g,
        replacement: '–º—ã —Ä–∞–±–æ—Ç–∞–µ–º',
        description: 'Personal pronoun requires conjugated verb form',
        category: 'verb_form',
        confidence: 0.95
      },
      {
        pattern: /\b–≤—ã —á–∏—Ç–∞—Ç—å\b/g,
        replacement: '–≤—ã —á–∏—Ç–∞–µ—Ç–µ',
        description: 'Personal pronoun requires conjugated verb form',
        category: 'verb_form',
        confidence: 0.95
      },
      {
        pattern: /\b–æ–Ω–∏ –∂–∏—Ç—å\b/g,
        replacement: '–æ–Ω–∏ –∂–∏–≤—É—Ç',
        description: 'Personal pronoun requires conjugated verb form',
        category: 'verb_form',
        confidence: 0.95
      },

      // Aspect corrections (perfective vs imperfective)
      {
        pattern: /\b—è –≤—Å–µ–≥–¥–∞ –¥–µ–ª–∞—Ç—å\b/g,
        replacement: '—è –≤—Å–µ–≥–¥–∞ –¥–µ–ª–∞—é',
        description: 'Habitual actions require imperfective aspect',
        category: 'verb_form',
        confidence: 0.9
      },
      {
        pattern: /\b–∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Å–¥–µ–ª–∞—Ç—å\b/g,
        replacement: '–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –¥–µ–ª–∞—Ç—å',
        description: 'Repeated actions require imperfective aspect',
        category: 'verb_form',
        confidence: 0.9
      },
      {
        pattern: /\b–∑–∞–≤—Ç—Ä–∞ –¥–µ–ª–∞—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ\b/g,
        replacement: '–∑–∞–≤—Ç—Ä–∞ —Å–¥–µ–ª–∞—é –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ',
        description: 'Future completed action requires perfective aspect',
        category: 'verb_form',
        confidence: 0.85
      },
      {
        pattern: /\b–≤—á–µ—Ä–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–∏—Å—å–º–æ\b/g,
        replacement: '–≤—á–µ—Ä–∞ –Ω–∞–ø–∏—Å–∞–ª –ø–∏—Å—å–º–æ',
        description: 'Past completed action requires perfective aspect',
        category: 'verb_form',
        confidence: 0.85
      },

      // Tense corrections
      {
        pattern: /\b–≤—á–µ—Ä–∞ —è –ø–æ–π–¥—É\b/g,
        replacement: '–≤—á–µ—Ä–∞ —è –ø–æ—à—ë–ª',
        description: 'Past time requires past tense',
        category: 'verb_form',
        confidence: 0.9
      },
      {
        pattern: /\b–∑–∞–≤—Ç—Ä–∞ —è —à—ë–ª\b/g,
        replacement: '–∑–∞–≤—Ç—Ä–∞ —è –ø–æ–π–¥—É',
        description: 'Future time requires future tense',
        category: 'verb_form',
        confidence: 0.9
      },
      {
        pattern: /\b—Å–µ–π—á–∞—Å —è –ø–æ—à—ë–ª\b/g,
        replacement: '—Å–µ–π—á–∞—Å —è –∏–¥—É',
        description: 'Present time requires present tense',
        category: 'verb_form',
        confidence: 0.9
      },

      // Gender agreement in past tense
      {
        pattern: /\b–æ–Ω–∞ –ø–æ—à—ë–ª\b/g,
        replacement: '–æ–Ω–∞ –ø–æ—à–ª–∞',
        description: 'Feminine subject requires feminine past tense form',
        category: 'verb_form',
        confidence: 0.95
      },
      {
        pattern: /\b–æ–Ω –ø–æ—à–ª–∞\b/g,
        replacement: '–æ–Ω –ø–æ—à—ë–ª',
        description: 'Masculine subject requires masculine past tense form',
        category: 'verb_form',
        confidence: 0.95
      },
      {
        pattern: /\b–º–∞—à–∏–Ω–∞ –ø–æ–µ—Ö–∞–ª\b/g,
        replacement: '–º–∞—à–∏–Ω–∞ –ø–æ–µ—Ö–∞–ª–∞',
        description: 'Feminine noun requires feminine past tense form',
        category: 'verb_form',
        confidence: 0.95
      },
      {
        pattern: /\b—Å—Ç–æ–ª —Å—Ç–æ—è–ª\b/g,
        replacement: '—Å—Ç–æ–ª —Å—Ç–æ—è–ª',
        description: 'Correct masculine agreement',
        category: 'verb_form',
        confidence: 0.8
      },

      // Common conjugation errors
      {
        pattern: /\b—è –∏–¥—É –¥–æ–º–æ–π –≤—á–µ—Ä–∞\b/g,
        replacement: '—è —à—ë–ª –¥–æ–º–æ–π –≤—á–µ—Ä–∞',
        description: 'Past time context requires past tense',
        category: 'verb_form',
        confidence: 0.9
      },
      {
        pattern: /\b–º—ã –±—ã–ª –¥–æ–º–∞\b/g,
        replacement: '–º—ã –±—ã–ª–∏ –¥–æ–º–∞',
        description: 'Plural subject requires plural verb form',
        category: 'verb_form',
        confidence: 0.95
      },
      {
        pattern: /\b—Ç—ã –±—ã–ª–∏ –¥–æ–º–∞\b/g,
        replacement: '—Ç—ã –±—ã–ª –¥–æ–º–∞',
        description: 'Singular subject requires singular verb form',
        category: 'verb_form',
        confidence: 0.95
      },

      // Modal verb constructions
      {
        pattern: /\b—è –º–æ–≥—É –¥–µ–ª–∞—Ç—å\b/g,
        replacement: '—è –º–æ–≥—É –¥–µ–ª–∞—Ç—å',
        description: 'Correct modal construction with infinitive',
        category: 'verb_form',
        confidence: 0.7
      },
      {
        pattern: /\b–Ω–∞–¥–æ –¥–µ–ª–∞—Ç—å\b/g,
        replacement: '–Ω–∞–¥–æ –¥–µ–ª–∞—Ç—å',
        description: 'Correct modal construction',
        category: 'verb_form',
        confidence: 0.7
      },
      {
        pattern: /\b—Ö–æ—á—É —Å–¥–µ–ª–∞–ª\b/g,
        replacement: '—Ö–æ—á—É —Å–¥–µ–ª–∞—Ç—å',
        description: 'Modal verb requires infinitive, not past tense',
        category: 'verb_form',
        confidence: 0.9
      },

      // Reflexive verbs
      {
        pattern: /\b—è —É—á–∏—Ç—å—Å—è —Ä—É—Å—Å–∫–∏–π\b/g,
        replacement: '—è –∏–∑—É—á–∞—é —Ä—É—Å—Å–∫–∏–π',
        description: 'Use transitive form for object-taking verb',
        category: 'verb_form',
        confidence: 0.85
      },
      {
        pattern: /\b–æ–Ω –æ–¥–µ–≤–∞–µ—Ç\b(?!\s+–∫–æ–≥–æ)/g,
        replacement: '–æ–Ω –æ–¥–µ–≤–∞–µ—Ç—Å—è',
        description: 'Use reflexive form when no object is specified',
        category: 'verb_form',
        confidence: 0.8
      },

      // Imperative mood corrections
      {
        pattern: /\b—Ç—ã –¥–∞–π –º–Ω–µ\b/g,
        replacement: '–¥–∞–π –º–Ω–µ',
        description: 'Imperative mood does not need personal pronoun',
        category: 'verb_form',
        confidence: 0.8
      },
      {
        pattern: /\b–≤—ã –¥–∞–π—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞\b/g,
        replacement: '–¥–∞–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞',
        description: 'Add punctuation with politeness marker',
        category: 'verb_form',
        confidence: 0.85
      }
    ]

    this.patterns.push(...patterns)
  }

  /**
   * Add case correction patterns
   */
  private addCasePatterns(): void {
    const patterns: GrammarPattern[] = [
      // Fix word boundaries (existing)
      {
        pattern: /\b–∫–æ–º —Ñ–æ—Ä—Ç–∞\b/g,
        replacement: '–∫–æ–º—Ñ–æ—Ä—Ç–∞',
        description: 'Fix word boundary in "–∫–æ–º—Ñ–æ—Ä—Ç–∞"',
        category: 'case_correction',
        confidence: 0.9
      },
      {
        pattern: /\b–ø–æ–ª –Ω–æ—Å—Ç—å—é\b/g,
        replacement: '–ø–æ–ª–Ω–æ—Å—Ç—å—é',
        description: 'Fix word boundary in "–ø–æ–ª–Ω–æ—Å—Ç—å—é"',
        category: 'case_correction',
        confidence: 0.95
      },
      {
        pattern: /\b–í–æ—Å –º–æ–∂–Ω–æ\b/g,
        replacement: '–≤–æ–∑–º–æ–∂–Ω–æ',
        description: 'Fix capitalization and word boundary in "–≤–æ–∑–º–æ–∂–Ω–æ"',
        category: 'case_correction',
        confidence: 0.9
      },

      // Russian case corrections (Task 7.3 requirements)

      // Genitive case after prepositions
      {
        pattern: /\b–±–µ–∑ (\w+)(–∞|—è|—ã|–∏)\b/g,
        replacement: '–±–µ–∑ $1–∞',
        description: 'Preposition "–±–µ–∑" requires genitive case',
        category: 'case_correction',
        confidence: 0.85,
        conditions: {
          contextAfter: /^\s*[–∞-—è—ë–ê-–Ø–Å]/
        }
      },
      {
        pattern: /\b–¥–ª—è (\w+)(–æ–º|–æ–π|–∞–º–∏|–∞—Ö)\b/g,
        replacement: '–¥–ª—è $1—ã',
        description: 'Preposition "–¥–ª—è" requires genitive case',
        category: 'case_correction',
        confidence: 0.85
      },
      {
        pattern: /\b–∏–∑ (\w+)(—É|–µ|–æ–º|–æ–π)\b/g,
        replacement: '–∏–∑ $1–∞',
        description: 'Preposition "–∏–∑" requires genitive case',
        category: 'case_correction',
        confidence: 0.85
      },
      {
        pattern: /\b–æ—Ç (\w+)(—É|–µ|–æ–º|–æ–π)\b/g,
        replacement: '–æ—Ç $1–∞',
        description: 'Preposition "–æ—Ç" requires genitive case',
        category: 'case_correction',
        confidence: 0.85
      },
      {
        pattern: /\b–¥–æ (\w+)(—É|–µ|–æ–º|–æ–π)\b/g,
        replacement: '–¥–æ $1–∞',
        description: 'Preposition "–¥–æ" requires genitive case',
        category: 'case_correction',
        confidence: 0.85
      },

      // Dative case corrections
      {
        pattern: /\b–∫ (\w+)(–∞|—ã|–æ–º|–æ–π)\b/g,
        replacement: '–∫ $1—É',
        description: 'Preposition "–∫" requires dative case',
        category: 'case_correction',
        confidence: 0.85
      },
      {
        pattern: /\b–ø–æ (\w+)(–∞|—ã|–æ–º|–æ–π)\b/g,
        replacement: '–ø–æ $1–µ',
        description: 'Preposition "–ø–æ" requires dative case',
        category: 'case_correction',
        confidence: 0.8
      },

      // Accusative vs Prepositional case with –≤/–Ω–∞
      {
        pattern: /\b–≤ —à–∫–æ–ª–µ –∏–¥—Ç–∏\b/g,
        replacement: '–≤ —à–∫–æ–ª—É –∏–¥—Ç–∏',
        description: 'Motion requires accusative case with preposition "–≤"',
        category: 'case_correction',
        confidence: 0.9
      },
      {
        pattern: /\b–Ω–∞ —Ä–∞–±–æ—Ç–µ –µ—Ö–∞—Ç—å\b/g,
        replacement: '–Ω–∞ —Ä–∞–±–æ—Ç—É –µ—Ö–∞—Ç—å',
        description: 'Motion requires accusative case with preposition "–Ω–∞"',
        category: 'case_correction',
        confidence: 0.9
      },
      {
        pattern: /\b–≤ —à–∫–æ–ª—É —É—á–∏—Ç—å—Å—è\b/g,
        replacement: '–≤ —à–∫–æ–ª–µ —É—á–∏—Ç—å—Å—è',
        description: 'State/activity requires prepositional case with preposition "–≤"',
        category: 'case_correction',
        confidence: 0.9
      },
      {
        pattern: /\b–Ω–∞ —Ä–∞–±–æ—Ç—É —Ä–∞–±–æ—Ç–∞—Ç—å\b/g,
        replacement: '–Ω–∞ —Ä–∞–±–æ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å',
        description: 'State/activity requires prepositional case with preposition "–Ω–∞"',
        category: 'case_correction',
        confidence: 0.9
      },

      // Instrumental case corrections
      {
        pattern: /\b—Å (\w+)(–∞|—ã|—É|–µ)\b/g,
        replacement: '—Å $1–æ–º',
        description: 'Preposition "—Å" (with) requires instrumental case',
        category: 'case_correction',
        confidence: 0.8
      },
      {
        pattern: /\b–Ω–∞–¥ (\w+)(–∞|—ã|—É|–µ)\b/g,
        replacement: '–Ω–∞–¥ $1–æ–º',
        description: 'Preposition "–Ω–∞–¥" requires instrumental case',
        category: 'case_correction',
        confidence: 0.85
      },
      {
        pattern: /\b–ø–æ–¥ (\w+)(–∞|—ã|—É|–µ)\b/g,
        replacement: '–ø–æ–¥ $1–æ–º',
        description: 'Preposition "–ø–æ–¥" requires instrumental case',
        category: 'case_correction',
        confidence: 0.85
      },
      {
        pattern: /\b–º–µ–∂–¥—É (\w+)(–∞|—ã|—É|–µ)\b/g,
        replacement: '–º–µ–∂–¥—É $1–∞–º–∏',
        description: 'Preposition "–º–µ–∂–¥—É" requires instrumental case',
        category: 'case_correction',
        confidence: 0.85
      },

      // Number-noun case agreement
      {
        pattern: /\b–¥–≤–∞ (\w+)(—ã|–∏|–æ–≤|–µ–π)\b/g,
        replacement: '–¥–≤–∞ $1–∞',
        description: 'Number "–¥–≤–∞" requires genitive singular',
        category: 'case_correction',
        confidence: 0.9
      },
      {
        pattern: /\b—Ç—Ä–∏ (\w+)(—ã|–∏|–æ–≤|–µ–π)\b/g,
        replacement: '—Ç—Ä–∏ $1–∞',
        description: 'Number "—Ç—Ä–∏" requires genitive singular',
        category: 'case_correction',
        confidence: 0.9
      },
      {
        pattern: /\b—á–µ—Ç—ã—Ä–µ (\w+)(—ã|–∏|–æ–≤|–µ–π)\b/g,
        replacement: '—á–µ—Ç—ã—Ä–µ $1–∞',
        description: 'Number "—á–µ—Ç—ã—Ä–µ" requires genitive singular',
        category: 'case_correction',
        confidence: 0.9
      },
      {
        pattern: /\b–ø—è—Ç—å (\w+)(?!–µ–π|–æ–≤)\b/g,
        replacement: '–ø—è—Ç—å $1–µ–π',
        description: 'Number "–ø—è—Ç—å" requires genitive plural',
        category: 'case_correction',
        confidence: 0.85
      },

      // Gender agreement corrections
      {
        pattern: /\b–∫—Ä–∞—Å–∏–≤—ã–π –¥–µ–≤–æ—á–∫–∞\b/g,
        replacement: '–∫—Ä–∞—Å–∏–≤–∞—è –¥–µ–≤–æ—á–∫–∞',
        description: 'Adjective must agree with feminine noun',
        category: 'case_correction',
        confidence: 0.95
      },
      {
        pattern: /\b—Ö–æ—Ä–æ—à–∏–π —Å—Ç—É–¥–µ–Ω—Ç–∫–∞\b/g,
        replacement: '—Ö–æ—Ä–æ—à–∞—è —Å—Ç—É–¥–µ–Ω—Ç–∫–∞',
        description: 'Adjective must agree with feminine noun',
        category: 'case_correction',
        confidence: 0.95
      },
      {
        pattern: /\b–Ω–æ–≤—ã–π –º–∞—à–∏–Ω–∞\b/g,
        replacement: '–Ω–æ–≤–∞—è –º–∞—à–∏–Ω–∞',
        description: 'Adjective must agree with feminine noun',
        category: 'case_correction',
        confidence: 0.95
      },
      {
        pattern: /\b–±–æ–ª—å—à–æ–π –¥–æ–º\b/g,
        replacement: '–±–æ–ª—å—à–æ–π –¥–æ–º',
        description: 'Correct masculine agreement',
        category: 'case_correction',
        confidence: 0.8
      },
      {
        pattern: /\b–±–æ–ª—å—à–∞—è —Å—Ç–æ–ª\b/g,
        replacement: '–±–æ–ª—å—à–æ–π —Å—Ç–æ–ª',
        description: 'Adjective must agree with masculine noun',
        category: 'case_correction',
        confidence: 0.95
      },
      {
        pattern: /\b–∫—Ä–∞—Å–∏–≤–æ–µ –¥–µ–≤–æ—á–∫–∞\b/g,
        replacement: '–∫—Ä–∞—Å–∏–≤–∞—è –¥–µ–≤–æ—á–∫–∞',
        description: 'Wrong gender agreement, should be feminine',
        category: 'case_correction',
        confidence: 0.95
      }
    ]

    this.patterns.push(...patterns)
  }

  /**
   * Add preposition correction patterns
   */
  private addPrepositionPatterns(): void {
    const patterns: GrammarPattern[] = [
      {
        pattern: /\b–≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑\s+(\w+)\s+–ª–∏\b/g,
        replacement: '–≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ $1',
        description: 'Remove unnecessary particle "–ª–∏"',
        category: 'preposition',
        confidence: 0.8
      },
      {
        pattern: /\b—Å—Ç–∞–≤–∏ –ª–∏\b/g,
        replacement: '—Å—Ç–∞–≤–∏–ª–∏',
        description: 'Fix word boundary in verb form',
        category: 'preposition',
        confidence: 0.9
      }
    ]

    this.patterns.push(...patterns)
  }

  /**
   * Add conjunction and particle patterns
   */
  private addConjunctionPatterns(): void {
    const patterns: GrammarPattern[] = [
      {
        pattern: /\b–∂–µ—Ç –±—ã—Ç—å\b/g,
        replacement: '–º–æ–∂–µ—Ç –±—ã—Ç—å',
        description: 'Fix incomplete conjunction "–º–æ–∂–µ—Ç –±—ã—Ç—å"',
        category: 'conjunction',
        confidence: 0.85
      },
      {
        pattern: /\b–∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –∂–µ—Ç –±—ã—Ç—å\b/g,
        replacement: '–∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞, –º–æ–∂–µ—Ç –±—ã—Ç—å',
        description: 'Fix conjunction and add punctuation',
        category: 'conjunction',
        confidence: 0.8
      },
      {
        pattern: /\b–í—Å—ë –±—ã–ª–∏ —Å—á–∞—Å—Ç–ª–∏–≤—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –∂–µ—Ç –±—ã—Ç—å\b/g,
        replacement: '–í—Å–µ –±—ã–ª–∏ —Å—á–∞—Å—Ç–ª–∏–≤—ã, –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å',
        description: 'Fix multiple issues in sentence structure',
        category: 'conjunction',
        confidence: 0.75
      }
    ]

    this.patterns.push(...patterns)
  }

  /**
   * Add sentence structure and punctuation patterns
   */
  private addSentenceStructurePatterns(): void {
    const patterns: GrammarPattern[] = [
      {
        pattern: /\b–∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Ç–æ —Ç–∞–∫–æ–π –¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç—å\b/g,
        replacement: '–∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Ç–∞–∫–æ–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ',
        description: 'Fix sentence structure and word form',
        category: 'sentence_structure',
        confidence: 0.7
      },
      {
        pattern: /\b–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ –≤—ã—à–µ —á—É–∂–æ–≥–æ\b/g,
        replacement: '—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ –≤—ã—à–µ —á—É–∂–æ–≥–æ',
        description: 'Fix word form "—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ"',
        category: 'sentence_structure',
        confidence: 0.85
      },
      {
        pattern: /\b–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–ª–∞\b/g,
        replacement: '–ü–æ–∫–∞–∑–∞—Ç—å, –∑–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ',
        description: 'Fix sentence structure and technical term',
        category: 'sentence_structure',
        confidence: 0.8
      },
      {
        pattern: /\b–æ–Ω–∏ –≤—Å–µ –≥–¥–µ –æ—Ç–≤–µ—á–∞–ª —ç-—ç\b/g,
        replacement: '–æ–Ω–∏ –≤—Å–µ –æ—Ç–≤–µ—á–∞–ª–∏',
        description: 'Clean up fragmented speech with filler words',
        category: 'sentence_structure',
        confidence: 0.75
      }
    ]

    this.patterns.push(...patterns)
  }

  /**
   * Add production-specific patterns from screenshot analysis
   */
  private addProductionSpecificPatterns(): void {
    const patterns: GrammarPattern[] = [
      // Long fragmented sentence from screenshot
      {
        pattern: /\b–í–æ—Ç —Å–∞–º—ã–π –ª—É—á—à–∏–π[\s\S]*?–ø–æ–ª –Ω–æ—Å—Ç—å—é\b/g,
        replacement:
          '–í–æ—Ç —Å–∞–º—ã–µ –ª—É—á—à–∏–µ –ª—é–¥–∏, –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –æ—Ç—á–∞—è–Ω–Ω–æ –ø—ã—Ç–∞–µ—Ç–µ—Å—å —Å–ø–∞—Å—Ç–∏, –ø–æ—á–∏–Ω–∏—Ç—å –∏ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç—å. –Ø –Ω–µ —É–≤–∞–∂–∞—é –≤–∞—à–∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è. –ö–æ–≥–¥–∞ –≤—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤—ã–±–∏—Ä–∞–µ—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ? –ö–æ–≥–¥–∞ –≤—ã –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ —Å—Ç–∞–≤–∏–ª–∏ —Å–≤–æ–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ –≤—ã—à–µ —á—É–∂–æ–≥–æ –∫–æ–º—Ñ–æ—Ä—Ç–∞? –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ, –≤—ã –±—É–¥–µ—Ç–µ —Å–µ–º–µ–π–Ω—ã–º –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–æ–º, –æ–Ω–∏ –≤—Å–µ –æ—Ç–≤–µ—á–∞–ª–∏. –í—Å–µ –±—ã–ª–∏ —Å—á–∞—Å—Ç–ª–∏–≤—ã, –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –±—É–¥–µ—Ç. –ü–æ–Ω—è–ª–∏, –ª—é–¥–∏ –µ—â–µ –±—ã–ª–∏, —á—Ç–æ –≤–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞.',
        description: 'Restructure long fragmented production text',
        category: 'sentence_structure',
        confidence: 0.6,
        conditions: {
          wordCount: {min: 30}
        }
      }
    ]

    this.patterns.push(...patterns)
  }

  /**
   * Add advanced Russian grammar patterns (Task 7.3)
   * Specialized patterns for Russian morphology, syntax, and common speech-to-text errors
   */
  private addAdvancedRussianPatterns(): void {
    const patterns: GrammarPattern[] = [
      // Complex case patterns with context
      {
        pattern: /\b(–ø–æ—Å–ª–µ|–¥–æ|–≤–æ –≤—Ä–µ–º—è|–≤ —Ç–µ—á–µ–Ω–∏–µ|–≤ —Ö–æ–¥–µ)\s+(\w+)(?![–∞–µ–∏—è—ë—ã—É–æ])\b/g,
        replacement: '$1 $2–µ',
        description: 'Time expressions require genitive case',
        category: 'case_correction',
        confidence: 0.8
      },

      // Verbal aspect patterns with context
      {
        pattern: /\b(–≤—Å–µ–≥–¥–∞|—á–∞—Å—Ç–æ|—Ä–µ–¥–∫–æ|–∏–Ω–æ–≥–¥–∞|–æ–±—ã—á–Ω–æ)\s+(\w+)(—é|–µ—à—å|–µ—Ç|–µ–º|–µ—Ç–µ|—É—Ç|—è—Ç)\b/g,
        replacement: '$1 $2$3',
        description: 'Frequency adverbs with imperfective verbs are correct',
        category: 'verb_form',
        confidence: 0.7
      },

      // Conditional mood patterns
      {
        pattern: /\b–µ—Å–ª–∏ —è –±—É–¥–µ—Ç\b/g,
        replacement: '–µ—Å–ª–∏ —è –±—É–¥—É',
        description: 'First person singular future conditional',
        category: 'verb_form',
        confidence: 0.9
      },
      {
        pattern: /\b–µ—Å–ª–∏ —Ç—ã –±—É–¥–µ—Ç\b/g,
        replacement: '–µ—Å–ª–∏ —Ç—ã –±—É–¥–µ—à—å',
        description: 'Second person singular future conditional',
        category: 'verb_form',
        confidence: 0.9
      },

      // Speech-to-text specific Russian errors
      {
        pattern: /\b—á—Ç–æ —Ç–æ\b/g,
        replacement: '—á—Ç–æ-—Ç–æ',
        description: 'Indefinite pronouns use hyphen',
        category: 'punctuation',
        confidence: 0.95
      },
      {
        pattern: /\b–∫—Ç–æ —Ç–æ\b/g,
        replacement: '–∫—Ç–æ-—Ç–æ',
        description: 'Indefinite pronouns use hyphen',
        category: 'punctuation',
        confidence: 0.95
      },
      {
        pattern: /\b–∫–∞–∫ —Ç–æ\b/g,
        replacement: '–∫–∞–∫-—Ç–æ',
        description: 'Indefinite adverbs use hyphen',
        category: 'punctuation',
        confidence: 0.95
      },
      {
        pattern: /\b–ø–æ —ç—Ç–æ–º—É\b/g,
        replacement: '–ø–æ—ç—Ç–æ–º—É',
        description: 'Conjunctive adverb is written as one word',
        category: 'word_order',
        confidence: 0.95
      },
      {
        pattern: /\b–≤ –º–µ—Å—Ç–æ\b/g,
        replacement: '–≤–º–µ—Å—Ç–æ',
        description: 'Preposition is written as one word',
        category: 'word_order',
        confidence: 0.95
      },
      {
        pattern: /\b–Ω–∞ –∫–æ–Ω–µ—Ü\b/g,
        replacement: '–Ω–∞–∫–æ–Ω–µ—Ü',
        description: 'Adverb is written as one word',
        category: 'word_order',
        confidence: 0.95
      },

      // Common transcription mishearings
      {
        pattern: /\b—â–∞—Å\b/g,
        replacement: '—Å–µ–π—á–∞—Å',
        description: 'Colloquial pronunciation correction',
        category: 'word_order',
        confidence: 0.9
      },
      {
        pattern: /\b—Ç–æ–∫–æ\b/g,
        replacement: '—Ç–æ–ª—å–∫–æ',
        description: 'Common transcription error',
        category: 'word_order',
        confidence: 0.9
      },
      {
        pattern: /\b–∫–∞–¥–∞\b/g,
        replacement: '–∫–æ–≥–¥–∞',
        description: 'Common transcription error',
        category: 'word_order',
        confidence: 0.9
      },

      // Russian-specific preposition combinations
      {
        pattern: /\b–±–ª–∞–≥–æ–¥–∞—Ä—è (\w+)(–æ–º|–∞–º–∏|–∞—Ö)\b/g,
        replacement: '–±–ª–∞–≥–æ–¥–∞—Ä—è $1—É',
        description: 'Preposition "–±–ª–∞–≥–æ–¥–∞—Ä—è" requires dative case',
        category: 'case_correction',
        confidence: 0.85
      },
      {
        pattern: /\b—Å–æ–≥–ª–∞—Å–Ω–æ (\w+)(–∞|—ã|–æ–º|–∞–º–∏)\b/g,
        replacement: '—Å–æ–≥–ª–∞—Å–Ω–æ $1—É',
        description: 'Preposition "—Å–æ–≥–ª–∞—Å–Ω–æ" requires dative case',
        category: 'case_correction',
        confidence: 0.85
      },

      // Verb government patterns (verbs requiring specific cases)
      {
        pattern: /\b–ø–æ–º–æ–≥–∞—Ç—å (\w+)(–∞|—ã|–æ–º)\b/g,
        replacement: '–ø–æ–º–æ–≥–∞—Ç—å $1—É',
        description: 'Verb "–ø–æ–º–æ–≥–∞—Ç—å" governs dative case',
        category: 'case_correction',
        confidence: 0.85
      },
      {
        pattern: /\b—É–ø—Ä–∞–≤–ª—è—Ç—å (\w+)(–∞|—ã|—É|–µ)\b/g,
        replacement: '—É–ø—Ä–∞–≤–ª—è—Ç—å $1–æ–º',
        description: 'Verb "—É–ø—Ä–∞–≤–ª—è—Ç—å" governs instrumental case',
        category: 'case_correction',
        confidence: 0.85
      },

      // Impersonal constructions
      {
        pattern: /\b—è –º–æ–∂–Ω–æ\b/g,
        replacement: '–º–Ω–µ –º–æ–∂–Ω–æ',
        description: 'Impersonal construction requires dative case',
        category: 'case_correction',
        confidence: 0.9
      },
      {
        pattern: /\b—Ç—ã –Ω—É–∂–Ω–æ\b/g,
        replacement: '—Ç–µ–±–µ –Ω—É–∂–Ω–æ',
        description: 'Impersonal construction requires dative case',
        category: 'case_correction',
        confidence: 0.9
      },
      {
        pattern: /\b–æ–Ω –Ω–∞–¥–æ\b/g,
        replacement: '–µ–º—É –Ω–∞–¥–æ',
        description: 'Impersonal construction requires dative case',
        category: 'case_correction',
        confidence: 0.9
      }
    ]

    this.patterns.push(...patterns)
  }

  /**
   * Check if pattern category is enabled in config
   */
  private isPatternCategoryEnabled(category: string): boolean {
    switch (category) {
      case 'word_order':
        return this.config.enableWordOrderCorrection
      case 'verb_form':
        return this.config.enableVerbFormCorrection
      case 'case_correction':
        return this.config.enableCaseCorrection
      case 'preposition':
        return this.config.enablePrepositionCorrection
      case 'conjunction':
        return this.config.enableConjunctionCorrection
      case 'particle':
        return this.config.enableParticleCorrection
      case 'punctuation':
        return this.config.enablePunctuationCorrection
      case 'sentence_structure':
        return this.config.enableSentenceStructureCorrection
      default:
        return true
    }
  }

  /**
   * Check pattern conditions
   */
  private checkPatternConditions(text: string, conditions: GrammarPattern['conditions']): boolean {
    if (!conditions) return true

    // Check word count conditions
    if (conditions.wordCount) {
      const wordCount = text.split(/\s+/).length
      if (conditions.wordCount.min && wordCount < conditions.wordCount.min) return false
      if (conditions.wordCount.max && wordCount > conditions.wordCount.max) return false
    }

    // Check context conditions
    if (conditions.contextBefore && !conditions.contextBefore.test(text)) return false
    if (conditions.contextAfter && !conditions.contextAfter.test(text)) return false

    return true
  }

  /**
   * Split text into sentences for processing
   */
  private splitIntoSentences(text: string): string[] {
    // Split on sentence boundaries while preserving the delimiters
    const sentences = text.split(/([.!?]+\s*)/).filter(s => s.trim().length > 0)
    const result: string[] = []

    for (let i = 0; i < sentences.length; i += 2) {
      const sentence = sentences[i]
      const delimiter = sentences[i + 1] || ''
      result.push(sentence + delimiter)
    }

    return result.filter(s => s.trim().length > 0)
  }

  /**
   * Update correction statistics
   */
  private updateStats(corrections: GrammarCorrectionDetail[]): void {
    this.correctionStats.totalCorrections += corrections.length

    corrections.forEach(correction => {
      // Update category stats
      const categoryCount = this.correctionStats.categoryStats.get(correction.category) || 0
      this.correctionStats.categoryStats.set(correction.category, categoryCount + 1)

      // Update pattern stats
      const patternCount = this.correctionStats.patternStats.get(correction.pattern) || 0
      this.correctionStats.patternStats.set(correction.pattern, patternCount + 1)
    })
  }

  /**
   * Get correction statistics
   */
  getStats(): object {
    return {
      config: this.config,
      patterns: {
        total: this.patterns.length,
        byCategory: this.getPatternsByCategory()
      },
      corrections: {
        total: this.correctionStats.totalCorrections,
        byCategory: Object.fromEntries(this.correctionStats.categoryStats),
        byPattern: Object.fromEntries(this.correctionStats.patternStats)
      }
    }
  }

  /**
   * Get patterns organized by category
   */
  private getPatternsByCategory(): object {
    const byCategory: Record<string, number> = {}

    this.patterns.forEach(pattern => {
      byCategory[pattern.category] = (byCategory[pattern.category] || 0) + 1
    })

    return byCategory
  }

  /**
   * Add custom grammar pattern
   */
  addCustomPattern(pattern: GrammarPattern): void {
    this.patterns.push(pattern)
    console.log(`üìù Added custom grammar pattern: ${pattern.description}`)
  }

  /**
   * Remove patterns by category
   */
  removePatternsByCategory(category: string): number {
    const initialLength = this.patterns.length
    this.patterns = this.patterns.filter(p => p.category !== category)
    const removed = initialLength - this.patterns.length

    if (removed > 0) {
      console.log(`üóëÔ∏è Removed ${removed} patterns from category: ${category}`)
    }

    return removed
  }

  /**
   * Update configuration
   */
  updateConfig(newConfig: Partial<GrammarCorrectionConfig>): void {
    this.config = {...this.config, ...newConfig}
    console.log('‚öôÔ∏è Grammar corrector configuration updated')
  }

  /**
   * Reset statistics
   */
  resetStats(): void {
    this.correctionStats = {
      totalCorrections: 0,
      categoryStats: new Map(),
      patternStats: new Map()
    }
    console.log('üìä Grammar correction statistics reset')
  }
}

/**
 * Factory function to create a configured GrammarPatternCorrector
 */
export function createGrammarPatternCorrector(
  config: Partial<GrammarCorrectionConfig> = {}
): GrammarPatternCorrector {
  return new GrammarPatternCorrector(config)
}

/**
 * Utility function for quick grammar correction
 */
export async function correctRussianGrammar(text: string): Promise<string> {
  const corrector = createGrammarPatternCorrector({
    confidenceThreshold: 0.7,
    maxCorrectionsPerSentence: 3,
    logCorrections: false
  })

  const result = await corrector.correct(text)
  return result.correctedText
}
