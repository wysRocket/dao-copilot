/**
 * VAD Configuration Manager
 * 
 * Manages different VAD configuration profiles and provides dynamic sensitivity adjustment
 * based on real-time analysis and user preferences.
 */

import {EventEmitter} from 'events'
import {VADConfig} from './voice-activity-detector'
import {VADPerformanceOptimizer, OptimizationProfile} from './vad-performance-optimizer'
import {logger} from './gemini-logger'

export interface SensitivityPreset {
  id: string
  name: string
  description: string
  config: Partial<VADConfig>
  useCase: string[]
  priority: number
}

export interface DynamicAdjustment {
  enabled: boolean
  adaptationSpeed: 'slow' | 'medium' | 'fast'
  environmentDetection: boolean
  learningEnabled: boolean
  confidenceThreshold: number
}

export interface ConfigurationProfile {
  id: string
  name: string
  baseConfig: VADConfig
  sensitivityPreset: string
  dynamicAdjustment: DynamicAdjustment
  environmentType: 'quiet' | 'normal' | 'noisy' | 'very_noisy' | 'auto'
  customOverrides: Partial<VADConfig>
  metadata: {
    created: number
    lastModified: number
    usage: number
    averageAccuracy?: number
  }
}

/**
 * VAD Configuration Manager
 * Provides intelligent configuration management for different use cases and environments
 */\nexport class VADConfigurationManager extends EventEmitter {\n  private sensitivityPresets: Map<string, SensitivityPreset>\n  private configurationProfiles: Map<string, ConfigurationProfile>\n  private currentProfile: ConfigurationProfile | null = null\n  private dynamicAdjustmentEnabled = false\n  private adjustmentHistory: {timestamp: number, config: Partial<VADConfig>, reason: string}[] = []\n\n  constructor() {\n    super()\n    this.sensitivityPresets = new Map()\n    this.configurationProfiles = new Map()\n    \n    this.initializeDefaultPresets()\n    this.initializeDefaultProfiles()\n    \n    logger.info('VADConfigurationManager initialized')\n  }\n\n  /**\n   * Initialize default sensitivity presets\n   */\n  private initializeDefaultPresets(): void {\n    const presets: SensitivityPreset[] = [\n      {\n        id: 'ultra_sensitive',\n        name: 'Ultra Sensitive',\n        description: 'Maximum sensitivity for detecting faint speech',\n        config: {\n          threshold: 0.15,\n          minSpeechDuration: 150,\n          interruptionThreshold: 0.4,\n          windowSize: 20,\n          hopLength: 6\n        },\n        useCase: ['quiet environments', 'soft-spoken users', 'studio recordings'],\n        priority: 1\n      },\n      {\n        id: 'high_sensitive',\n        name: 'High Sensitivity',\n        description: 'High sensitivity for clear speech detection',\n        config: {\n          threshold: 0.25,\n          minSpeechDuration: 200,\n          interruptionThreshold: 0.5,\n          windowSize: 22,\n          hopLength: 8\n        },\n        useCase: ['quiet environments', 'normal speech', 'interviews'],\n        priority: 2\n      },\n      {\n        id: 'balanced',\n        name: 'Balanced',\n        description: 'Good balance between sensitivity and false positive prevention',\n        config: {\n          threshold: 0.35,\n          minSpeechDuration: 300,\n          interruptionThreshold: 0.6,\n          windowSize: 25,\n          hopLength: 10\n        },\n        useCase: ['general use', 'office environments', 'video calls'],\n        priority: 3\n      },\n      {\n        id: 'conservative',\n        name: 'Conservative',\n        description: 'Lower sensitivity to reduce false positives in noisy environments',\n        config: {\n          threshold: 0.45,\n          minSpeechDuration: 400,\n          interruptionThreshold: 0.7,\n          windowSize: 30,\n          hopLength: 12\n        },\n        useCase: ['noisy environments', 'open offices', 'public spaces'],\n        priority: 4\n      },\n      {\n        id: 'strict',\n        name: 'Strict',\n        description: 'Very low sensitivity for extremely noisy environments',\n        config: {\n          threshold: 0.6,\n          minSpeechDuration: 500,\n          interruptionThreshold: 0.8,\n          windowSize: 35,\n          hopLength: 15\n        },\n        useCase: ['very noisy environments', 'crowded spaces', 'machinery noise'],\n        priority: 5\n      }\n    ]\n\n    presets.forEach(preset => {\n      this.sensitivityPresets.set(preset.id, preset)\n    })\n\n    logger.debug('Initialized sensitivity presets', {\n      presetCount: presets.length\n    })\n  }\n\n  /**\n   * Initialize default configuration profiles\n   */\n  private initializeDefaultProfiles(): void {\n    const profiles: Omit<ConfigurationProfile, 'metadata'>[] = [\n      {\n        id: 'studio_recording',\n        name: 'Studio Recording',\n        baseConfig: this.createBaseConfig(),\n        sensitivityPreset: 'ultra_sensitive',\n        dynamicAdjustment: {\n          enabled: false,\n          adaptationSpeed: 'slow',\n          environmentDetection: false,\n          learningEnabled: false,\n          confidenceThreshold: 0.95\n        },\n        environmentType: 'quiet',\n        customOverrides: {\n          enableBatchProcessing: true,\n          batchSize: 6,\n          maxProcessingDelay: 25\n        }\n      },\n      {\n        id: 'video_call',\n        name: 'Video Call',\n        baseConfig: this.createBaseConfig(),\n        sensitivityPreset: 'balanced',\n        dynamicAdjustment: {\n          enabled: true,\n          adaptationSpeed: 'medium',\n          environmentDetection: true,\n          learningEnabled: true,\n          confidenceThreshold: 0.8\n        },\n        environmentType: 'normal',\n        customOverrides: {\n          enableInterruption: true,\n          gracePeriodMs: 400\n        }\n      },\n      {\n        id: 'office_meeting',\n        name: 'Office Meeting',\n        baseConfig: this.createBaseConfig(),\n        sensitivityPreset: 'conservative',\n        dynamicAdjustment: {\n          enabled: true,\n          adaptationSpeed: 'fast',\n          environmentDetection: true,\n          learningEnabled: true,\n          confidenceThreshold: 0.75\n        },\n        environmentType: 'noisy',\n        customOverrides: {\n          enableInterruption: false,\n          maxSilenceDuration: 3000\n        }\n      },\n      {\n        id: 'mobile_outdoor',\n        name: 'Mobile Outdoor',\n        baseConfig: this.createBaseConfig(),\n        sensitivityPreset: 'strict',\n        dynamicAdjustment: {\n          enabled: true,\n          adaptationSpeed: 'fast',\n          environmentDetection: true,\n          learningEnabled: true,\n          confidenceThreshold: 0.7\n        },\n        environmentType: 'very_noisy',\n        customOverrides: {\n          enableBatchProcessing: true,\n          batchSize: 15,\n          maxProcessingDelay: 80\n        }\n      }\n    ]\n\n    const now = Date.now()\n    profiles.forEach(profile => {\n      const fullProfile: ConfigurationProfile = {\n        ...profile,\n        metadata: {\n          created: now,\n          lastModified: now,\n          usage: 0\n        }\n      }\n      this.configurationProfiles.set(profile.id, fullProfile)\n    })\n\n    logger.debug('Initialized configuration profiles', {\n      profileCount: profiles.length\n    })\n  }\n\n  /**\n   * Create base VAD configuration\n   */\n  private createBaseConfig(): VADConfig {\n    return {\n      threshold: 0.3,\n      minSpeechDuration: 300,\n      maxSilenceDuration: 2000,\n      windowSize: 25,\n      hopLength: 10,\n      enableInterruption: true,\n      interruptionThreshold: 0.6,\n      gracePeriodMs: 500,\n      enableBatchProcessing: true,\n      batchSize: 10,\n      maxProcessingDelay: 50\n    }\n  }\n\n  /**\n   * Get sensitivity preset by ID\n   */\n  getSensitivityPreset(id: string): SensitivityPreset | null {\n    return this.sensitivityPresets.get(id) || null\n  }\n\n  /**\n   * Get all sensitivity presets\n   */\n  getAllSensitivityPresets(): SensitivityPreset[] {\n    return Array.from(this.sensitivityPresets.values())\n      .sort((a, b) => a.priority - b.priority)\n  }\n\n  /**\n   * Get configuration profile by ID\n   */\n  getConfigurationProfile(id: string): ConfigurationProfile | null {\n    return this.configurationProfiles.get(id) || null\n  }\n\n  /**\n   * Get all configuration profiles\n   */\n  getAllConfigurationProfiles(): ConfigurationProfile[] {\n    return Array.from(this.configurationProfiles.values())\n      .sort((a, b) => b.metadata.usage - a.metadata.usage)\n  }\n\n  /**\n   * Apply configuration profile\n   */\n  applyConfigurationProfile(profileId: string): VADConfig | null {\n    const profile = this.configurationProfiles.get(profileId)\n    if (!profile) {\n      logger.warn('Configuration profile not found', { profileId })\n      return null\n    }\n\n    // Get sensitivity preset configuration\n    const preset = this.sensitivityPresets.get(profile.sensitivityPreset)\n    if (!preset) {\n      logger.warn('Sensitivity preset not found', { \n        presetId: profile.sensitivityPreset,\n        profileId \n      })\n      return null\n    }\n\n    // Merge configurations: base -> preset -> custom overrides\n    const finalConfig: VADConfig = {\n      ...profile.baseConfig,\n      ...preset.config,\n      ...profile.customOverrides\n    }\n\n    // Update profile usage\n    profile.metadata.usage++\n    profile.metadata.lastModified = Date.now()\n\n    this.currentProfile = profile\n    this.dynamicAdjustmentEnabled = profile.dynamicAdjustment.enabled\n\n    logger.info('Applied configuration profile', {\n      profileId: profile.id,\n      profileName: profile.name,\n      sensitivityPreset: profile.sensitivityPreset,\n      dynamicAdjustment: profile.dynamicAdjustment.enabled\n    })\n\n    this.emit('profile_applied', {\n      profile,\n      config: finalConfig\n    })\n\n    return finalConfig\n  }\n\n  /**\n   * Create custom configuration profile\n   */\n  createCustomProfile(\n    id: string,\n    name: string,\n    sensitivityPreset: string,\n    environmentType: ConfigurationProfile['environmentType'],\n    customOverrides: Partial<VADConfig> = {},\n    dynamicAdjustment: Partial<DynamicAdjustment> = {}\n  ): boolean {\n    if (this.configurationProfiles.has(id)) {\n      logger.warn('Configuration profile already exists', { id })\n      return false\n    }\n\n    const preset = this.sensitivityPresets.get(sensitivityPreset)\n    if (!preset) {\n      logger.warn('Invalid sensitivity preset', { sensitivityPreset })\n      return false\n    }\n\n    const profile: ConfigurationProfile = {\n      id,\n      name,\n      baseConfig: this.createBaseConfig(),\n      sensitivityPreset,\n      environmentType,\n      customOverrides,\n      dynamicAdjustment: {\n        enabled: false,\n        adaptationSpeed: 'medium',\n        environmentDetection: false,\n        learningEnabled: false,\n        confidenceThreshold: 0.8,\n        ...dynamicAdjustment\n      },\n      metadata: {\n        created: Date.now(),\n        lastModified: Date.now(),\n        usage: 0\n      }\n    }\n\n    this.configurationProfiles.set(id, profile)\n\n    logger.info('Created custom configuration profile', {\n      id,\n      name,\n      sensitivityPreset,\n      environmentType\n    })\n\n    this.emit('profile_created', { profile })\n\n    return true\n  }\n\n  /**\n   * Update configuration profile\n   */\n  updateConfigurationProfile(\n    id: string,\n    updates: Partial<Omit<ConfigurationProfile, 'id' | 'metadata'>>\n  ): boolean {\n    const profile = this.configurationProfiles.get(id)\n    if (!profile) {\n      logger.warn('Configuration profile not found for update', { id })\n      return false\n    }\n\n    // Apply updates\n    Object.assign(profile, updates)\n    profile.metadata.lastModified = Date.now()\n\n    logger.info('Updated configuration profile', {\n      id,\n      updates: Object.keys(updates)\n    })\n\n    this.emit('profile_updated', { profile, updates })\n\n    return true\n  }\n\n  /**\n   * Delete configuration profile\n   */\n  deleteConfigurationProfile(id: string): boolean {\n    const profile = this.configurationProfiles.get(id)\n    if (!profile) {\n      logger.warn('Configuration profile not found for deletion', { id })\n      return false\n    }\n\n    this.configurationProfiles.delete(id)\n\n    // If this was the current profile, clear it\n    if (this.currentProfile?.id === id) {\n      this.currentProfile = null\n      this.dynamicAdjustmentEnabled = false\n    }\n\n    logger.info('Deleted configuration profile', { id, name: profile.name })\n    this.emit('profile_deleted', { profileId: id })\n\n    return true\n  }\n\n  /**\n   * Get recommended profile based on environment and use case\n   */\n  getRecommendedProfile(\n    environmentType: 'quiet' | 'normal' | 'noisy' | 'very_noisy',\n    useCase?: string\n  ): ConfigurationProfile | null {\n    const profiles = Array.from(this.configurationProfiles.values())\n      .filter(profile => \n        profile.environmentType === environmentType || \n        profile.environmentType === 'auto'\n      )\n\n    if (profiles.length === 0) {\n      return null\n    }\n\n    // If use case is specified, try to match it\n    if (useCase) {\n      const matchingProfile = profiles.find(profile => \n        profile.name.toLowerCase().includes(useCase.toLowerCase())\n      )\n      if (matchingProfile) {\n        return matchingProfile\n      }\n    }\n\n    // Return most used profile for the environment\n    return profiles.sort((a, b) => b.metadata.usage - a.metadata.usage)[0]\n  }\n\n  /**\n   * Adjust configuration dynamically based on performance feedback\n   */\n  adjustConfigurationDynamically(\n    accuracyFeedback: number,\n    latencyFeedback: number,\n    environmentNoise: number\n  ): Partial<VADConfig> | null {\n    if (!this.currentProfile || !this.dynamicAdjustmentEnabled) {\n      return null\n    }\n\n    const adjustments: Partial<VADConfig> = {}\n    let adjustmentReason = ''\n\n    // Adjust threshold based on accuracy feedback\n    if (accuracyFeedback < 0.8) {\n      if (environmentNoise > 0.5) {\n        // Noisy environment with low accuracy - increase threshold\n        adjustments.threshold = Math.min((adjustments.threshold || 0.3) * 1.1, 0.8)\n        adjustmentReason += 'Increased threshold due to low accuracy in noisy environment. '\n      } else {\n        // Quiet environment with low accuracy - decrease threshold\n        adjustments.threshold = Math.max((adjustments.threshold || 0.3) * 0.9, 0.1)\n        adjustmentReason += 'Decreased threshold due to low accuracy in quiet environment. '\n      }\n    }\n\n    // Adjust processing parameters based on latency feedback\n    if (latencyFeedback > 100) {\n      adjustments.windowSize = Math.max((adjustments.windowSize || 25) - 2, 15)\n      adjustments.hopLength = Math.max((adjustments.hopLength || 10) - 1, 5)\n      adjustments.maxProcessingDelay = Math.max((adjustments.maxProcessingDelay || 50) - 10, 20)\n      adjustmentReason += 'Optimized for lower latency. '\n    }\n\n    // Only apply adjustments if something changed\n    if (Object.keys(adjustments).length === 0) {\n      return null\n    }\n\n    // Record adjustment history\n    this.adjustmentHistory.push({\n      timestamp: Date.now(),\n      config: adjustments,\n      reason: adjustmentReason.trim()\n    })\n\n    // Limit history size\n    if (this.adjustmentHistory.length > 100) {\n      this.adjustmentHistory = this.adjustmentHistory.slice(-50)\n    }\n\n    logger.info('Applied dynamic configuration adjustment', {\n      profileId: this.currentProfile.id,\n      adjustments,\n      reason: adjustmentReason.trim(),\n      accuracyFeedback,\n      latencyFeedback,\n      environmentNoise\n    })\n\n    this.emit('dynamic_adjustment', {\n      profile: this.currentProfile,\n      adjustments,\n      reason: adjustmentReason.trim()\n    })\n\n    return adjustments\n  }\n\n  /**\n   * Get current profile\n   */\n  getCurrentProfile(): ConfigurationProfile | null {\n    return this.currentProfile\n  }\n\n  /**\n   * Get adjustment history\n   */\n  getAdjustmentHistory(): typeof this.adjustmentHistory {\n    return [...this.adjustmentHistory]\n  }\n\n  /**\n   * Export configuration data\n   */\n  exportConfiguration(): {\n    sensitivityPresets: SensitivityPreset[]\n    configurationProfiles: ConfigurationProfile[]\n    currentProfile: ConfigurationProfile | null\n    adjustmentHistory: typeof this.adjustmentHistory\n  } {\n    return {\n      sensitivityPresets: this.getAllSensitivityPresets(),\n      configurationProfiles: this.getAllConfigurationProfiles(),\n      currentProfile: this.currentProfile,\n      adjustmentHistory: this.getAdjustmentHistory()\n    }\n  }\n\n  /**\n   * Import configuration data\n   */\n  importConfiguration(data: {\n    sensitivityPresets?: SensitivityPreset[]\n    configurationProfiles?: ConfigurationProfile[]\n  }): void {\n    if (data.sensitivityPresets) {\n      data.sensitivityPresets.forEach(preset => {\n        this.sensitivityPresets.set(preset.id, preset)\n      })\n    }\n\n    if (data.configurationProfiles) {\n      data.configurationProfiles.forEach(profile => {\n        this.configurationProfiles.set(profile.id, profile)\n      })\n    }\n\n    logger.info('Imported configuration data', {\n      presetCount: data.sensitivityPresets?.length || 0,\n      profileCount: data.configurationProfiles?.length || 0\n    })\n\n    this.emit('configuration_imported')\n  }\n}\n\nexport default VADConfigurationManager