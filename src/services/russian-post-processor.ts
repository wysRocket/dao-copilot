/**
 * Russian Post-Processor
 *
 * This module implements Task 7.4 requirements for Russian-specific text post-processing,
 * extending text processing capabilities with specialized Russian language features.
 *
 * Features:
 * - Cyrillic text normalization and standardization
 * - Russian-specific text segmentation
 * - Integration with RussianAudioPreprocessor, MixedLanguageDetector, and GrammarPatternCorrector
 * - Russian abbreviations and contractions support
 * - Advanced Russian typography and formatting
 * - Speech-to-text post-processing optimization for Russian
 */

import {MixedLanguageDetector, LanguageSegment} from './mixed-language-detector'
import {GrammarPatternCorrector, GrammarCorrectionDetail} from './grammar-pattern-corrector'

export interface RussianPostProcessorConfig {
  enableCyrillicNormalization: boolean
  enableTextSegmentation: boolean
  enableGrammarCorrection: boolean
  enableMixedLanguageDetection: boolean
  enableAbbreviationExpansion: boolean
  enableTypographyNormalization: boolean
  enableSpeechPatternCorrection: boolean
  confidenceThreshold: number
  maxProcessingTime: number
  preserveOriginalOnFailure: boolean
  logProcessingSteps: boolean
}

export interface ProcessingResult {
  originalText: string
  processedText: string
  languageSegments: LanguageSegment[]
  grammarCorrections: GrammarCorrectionDetail[]
  normalizations: TextNormalization[]
  segmentationInfo: SegmentationInfo
  processingTime: number
  confidence: number
  appliedSteps: string[]
}

export interface TextNormalization {
  type: 'cyrillic' | 'typography' | 'abbreviation' | 'contraction' | 'whitespace'
  original: string
  normalized: string
  position: {start: number; end: number}
  confidence: number
  reason: string
}

export interface SegmentationInfo {
  sentences: SentenceSegment[]
  paragraphs: ParagraphSegment[]
  totalSentences: number
  totalParagraphs: number
  averageSentenceLength: number
}

export interface SentenceSegment {
  text: string
  startIndex: number
  endIndex: number
  type: 'declarative' | 'interrogative' | 'exclamatory' | 'imperative'
  confidence: number
}

export interface ParagraphSegment {
  text: string
  startIndex: number
  endIndex: number
  sentences: SentenceSegment[]
  topicConfidence: number
}

/**
 * Russian Post-Processor class
 * Specialized text processing for Russian language with comprehensive features
 */
export class RussianPostProcessor {
  private config: RussianPostProcessorConfig
  private mixedLanguageDetector: MixedLanguageDetector
  private grammarCorrector: GrammarPatternCorrector

  // Russian-specific patterns and mappings
  private cyrillicNormalizationMap: Map<string, string> = new Map()
  private russianAbbreviations: Map<string, string> = new Map()
  private russianContractions: Map<string, string> = new Map()
  private sentenceEndPatterns: RegExp[] = []
  private paragraphBreakPatterns: RegExp[] = []

  constructor(config: Partial<RussianPostProcessorConfig> = {}) {
    this.config = {
      enableCyrillicNormalization: config.enableCyrillicNormalization ?? true,
      enableTextSegmentation: config.enableTextSegmentation ?? true,
      enableGrammarCorrection: config.enableGrammarCorrection ?? true,
      enableMixedLanguageDetection: config.enableMixedLanguageDetection ?? true,
      enableAbbreviationExpansion: config.enableAbbreviationExpansion ?? true,
      enableTypographyNormalization: config.enableTypographyNormalization ?? true,
      enableSpeechPatternCorrection: config.enableSpeechPatternCorrection ?? true,
      confidenceThreshold: config.confidenceThreshold || 0.7,
      maxProcessingTime: config.maxProcessingTime || 5000, // 5 seconds
      preserveOriginalOnFailure: config.preserveOriginalOnFailure ?? true,
      logProcessingSteps: config.logProcessingSteps ?? false
    }

    // Initialize components
    this.mixedLanguageDetector = new MixedLanguageDetector({
      minConfidenceThreshold: this.config.confidenceThreshold,
      enableRealTimeProcessing: true,
      enableStatisticalAnalysis: true
    })

    this.grammarCorrector = new GrammarPatternCorrector({
      enableCaseCorrection: true,
      enableVerbFormCorrection: true,
      confidenceThreshold: this.config.confidenceThreshold
    })

    this.initializeRussianPatterns()
    console.log('üîÑ Russian Post-Processor initialized with comprehensive language support')
  }

  /**
   * Main processing method - orchestrates all Russian-specific post-processing
   */
  async processText(text: string): Promise<ProcessingResult> {
    const startTime = Date.now()
    const originalText = text
    let processedText = text
    const appliedSteps: string[] = []
    const normalizations: TextNormalization[] = []
    let languageSegments: LanguageSegment[] = []
    let grammarCorrections: GrammarCorrectionDetail[] = []
    let segmentationInfo: SegmentationInfo = {
      sentences: [],
      paragraphs: [],
      totalSentences: 0,
      totalParagraphs: 0,
      averageSentenceLength: 0
    }

    try {
      // Step 1: Mixed Language Detection
      if (this.config.enableMixedLanguageDetection) {
        const detectionResult = await this.mixedLanguageDetector.detectSegments(processedText)
        languageSegments = detectionResult.segments
        appliedSteps.push('mixed_language_detection')

        if (this.config.logProcessingSteps) {
          console.log(
            `[RussianPostProcessor] Detected ${languageSegments.length} language segments`
          )
        }
      }

      // Step 2: Cyrillic Text Normalization
      if (this.config.enableCyrillicNormalization) {
        const normalizationResult = await this.normalizeCyrillicText(processedText)
        processedText = normalizationResult.text
        normalizations.push(...normalizationResult.normalizations)
        appliedSteps.push('cyrillic_normalization')
      }

      // Step 3: Typography and Formatting Normalization
      if (this.config.enableTypographyNormalization) {
        const typographyResult = await this.normalizeTypography(processedText)
        processedText = typographyResult.text
        normalizations.push(...typographyResult.normalizations)
        appliedSteps.push('typography_normalization')
      }

      // Step 4: Russian Abbreviations and Contractions
      if (this.config.enableAbbreviationExpansion) {
        const abbreviationResult = await this.expandAbbreviations(processedText)
        processedText = abbreviationResult.text
        normalizations.push(...abbreviationResult.normalizations)
        appliedSteps.push('abbreviation_expansion')
      }

      // Step 5: Speech Pattern Corrections
      if (this.config.enableSpeechPatternCorrection) {
        const speechResult = await this.correctSpeechPatterns(processedText)
        processedText = speechResult.text
        normalizations.push(...speechResult.normalizations)
        appliedSteps.push('speech_pattern_correction')
      }

      // Step 6: Grammar Correction
      if (this.config.enableGrammarCorrection) {
        const grammarResult = await this.grammarCorrector.correct(processedText)
        processedText = grammarResult.correctedText
        grammarCorrections = grammarResult.corrections
        appliedSteps.push('grammar_correction')
      }

      // Step 7: Text Segmentation
      if (this.config.enableTextSegmentation) {
        segmentationInfo = await this.segmentText(processedText)
        appliedSteps.push('text_segmentation')
      }

      // Calculate overall confidence
      const confidence = this.calculateOverallConfidence(
        languageSegments,
        grammarCorrections,
        normalizations
      )

      const processingTime = Date.now() - startTime

      if (this.config.logProcessingSteps) {
        console.log(
          `[RussianPostProcessor] Completed processing in ${processingTime}ms with ${appliedSteps.length} steps`
        )
      }

      return {
        originalText,
        processedText,
        languageSegments,
        grammarCorrections,
        normalizations,
        segmentationInfo,
        processingTime,
        confidence,
        appliedSteps
      }
    } catch (error) {
      console.error('[RussianPostProcessor] Processing error:', error)

      if (this.config.preserveOriginalOnFailure) {
        return {
          originalText,
          processedText: originalText,
          languageSegments: [],
          grammarCorrections: [],
          normalizations: [],
          segmentationInfo: {
            sentences: [],
            paragraphs: [],
            totalSentences: 0,
            totalParagraphs: 0,
            averageSentenceLength: 0
          },
          processingTime: Date.now() - startTime,
          confidence: 0.0,
          appliedSteps: ['error_fallback']
        }
      } else {
        throw error
      }
    }
  }

  /**
   * Initialize Russian-specific patterns and mappings
   */
  private initializeRussianPatterns(): void {
    this.initializeCyrillicNormalization()
    this.initializeAbbreviations()
    this.initializeContractions()
    this.initializeSentencePatterns()
    this.initializeParagraphPatterns()
  }

  /**
   * Initialize Cyrillic character normalization mappings
   */
  private initializeCyrillicNormalization(): void {
    // Homograph normalization (visually similar characters)
    this.cyrillicNormalizationMap.set('–ê', '–ê') // Cyrillic A
    this.cyrillicNormalizationMap.set('a', '–∞') // Latin a -> Cyrillic –∞
    this.cyrillicNormalizationMap.set('A', '–ê') // Latin A -> Cyrillic –ê
    this.cyrillicNormalizationMap.set('B', '–í') // Latin B -> Cyrillic –í
    this.cyrillicNormalizationMap.set('E', '–ï') // Latin E -> Cyrillic –ï
    this.cyrillicNormalizationMap.set('e', '–µ') // Latin e -> Cyrillic –µ
    this.cyrillicNormalizationMap.set('K', '–ö') // Latin K -> Cyrillic –ö
    this.cyrillicNormalizationMap.set('M', '–ú') // Latin M -> Cyrillic –ú
    this.cyrillicNormalizationMap.set('H', '–ù') // Latin H -> Cyrillic –ù
    this.cyrillicNormalizationMap.set('O', '–û') // Latin O -> Cyrillic –û
    this.cyrillicNormalizationMap.set('o', '–æ') // Latin o -> Cyrillic –æ
    this.cyrillicNormalizationMap.set('P', '–†') // Latin P -> Cyrillic –†
    this.cyrillicNormalizationMap.set('p', '—Ä') // Latin p -> Cyrillic —Ä
    this.cyrillicNormalizationMap.set('C', '–°') // Latin C -> Cyrillic –°
    this.cyrillicNormalizationMap.set('c', '—Å') // Latin c -> Cyrillic —Å
    this.cyrillicNormalizationMap.set('T', '–¢') // Latin T -> Cyrillic –¢
    this.cyrillicNormalizationMap.set('y', '—É') // Latin y -> Cyrillic —É
    this.cyrillicNormalizationMap.set('x', '—Ö') // Latin x -> Cyrillic —Ö
    this.cyrillicNormalizationMap.set('X', '–•') // Latin X -> Cyrillic –•

    // Additional normalizations for common transcription errors
    this.cyrillicNormalizationMap.set('—ë', '–µ') // Optional: —ë to –µ normalization (configurable)
    this.cyrillicNormalizationMap.set('–Å', '–ï') // Optional: –Å to –ï normalization
  }

  /**
   * Initialize Russian abbreviations
   */
  private initializeAbbreviations(): void {
    // Common Russian abbreviations
    this.russianAbbreviations.set('–≥.', '–≥–æ–¥')
    this.russianAbbreviations.set('–≥–≥.', '–≥–æ–¥—ã')
    this.russianAbbreviations.set('–≤.', '–≤–µ–∫')
    this.russianAbbreviations.set('–≤–≤.', '–≤–µ–∫–∞')
    this.russianAbbreviations.set('—Ä.', '—Ä—É–±–ª—å')
    this.russianAbbreviations.set('—Ä—É–±.', '—Ä—É–±–ª–µ–π')
    this.russianAbbreviations.set('–∫–æ–ø.', '–∫–æ–ø–µ–µ–∫')
    this.russianAbbreviations.set('—Ç—ã—Å.', '—Ç—ã—Å—è—á')
    this.russianAbbreviations.set('–º–ª–Ω.', '–º–∏–ª–ª–∏–æ–Ω–æ–≤')
    this.russianAbbreviations.set('–º–ª—Ä–¥.', '–º–∏–ª–ª–∏–∞—Ä–¥–æ–≤')
    this.russianAbbreviations.set('–∫–º.', '–∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤')
    this.russianAbbreviations.set('–º.', '–º–µ—Ç—Ä–æ–≤')
    this.russianAbbreviations.set('—Å–º.', '—Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–æ–≤')
    this.russianAbbreviations.set('–º–º.', '–º–∏–ª–ª–∏–º–µ—Ç—Ä–æ–≤')
    this.russianAbbreviations.set('–∫–≥.', '–∫–∏–ª–æ–≥—Ä–∞–º–º–æ–≤')
    this.russianAbbreviations.set('–≥.', '–≥—Ä–∞–º–º–æ–≤')
    this.russianAbbreviations.set('—Ç.', '—Ç–æ–Ω–Ω')
    this.russianAbbreviations.set('–ª.', '–ª–∏—Ç—Ä–æ–≤')
    this.russianAbbreviations.set('–º–ª.', '–º–∏–ª–ª–∏–ª–∏—Ç—Ä–æ–≤')
    this.russianAbbreviations.set('—Å–µ–∫.', '—Å–µ–∫—É–Ω–¥')
    this.russianAbbreviations.set('–º–∏–Ω.', '–º–∏–Ω—É—Ç')
    this.russianAbbreviations.set('—á.', '—á–∞—Å–æ–≤')

    // Titles and honorifics
    this.russianAbbreviations.set('–≥-–Ω', '–≥–æ—Å–ø–æ–¥–∏–Ω')
    this.russianAbbreviations.set('–≥-–∂–∞', '–≥–æ—Å–ø–æ–∂–∞')
    this.russianAbbreviations.set('–¥—Ä.', '–¥–æ–∫—Ç–æ—Ä')
    this.russianAbbreviations.set('–ø—Ä–æ—Ñ.', '–ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä')

    // Geographic abbreviations
    this.russianAbbreviations.set('–æ–±–ª.', '–æ–±–ª–∞—Å—Ç—å')
    this.russianAbbreviations.set('—Ä-–Ω', '—Ä–∞–π–æ–Ω')
    this.russianAbbreviations.set('—É–ª.', '—É–ª–∏—Ü–∞')
    this.russianAbbreviations.set('–ø—Ä.', '–ø—Ä–æ—Å–ø–µ–∫—Ç')
    this.russianAbbreviations.set('–ø–µ—Ä.', '–ø–µ—Ä–µ—É–ª–æ–∫')
    this.russianAbbreviations.set('–Ω–∞–±.', '–Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è')
    this.russianAbbreviations.set('–ø–ª.', '–ø–ª–æ—â–∞–¥—å')
    this.russianAbbreviations.set('–¥.', '–¥–æ–º')
    this.russianAbbreviations.set('–∫–≤.', '–∫–≤–∞—Ä—Ç–∏—Ä–∞')
    this.russianAbbreviations.set('—Å—Ç—Ä.', '—Å—Ç—Ä–æ–µ–Ω–∏–µ')

    // Organizations
    this.russianAbbreviations.set('–û–û–û', '–û–±—â–µ—Å—Ç–≤–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é')
    this.russianAbbreviations.set('–ó–ê–û', '–ó–∞–∫—Ä—ã—Ç–æ–µ –∞–∫—Ü–∏–æ–Ω–µ—Ä–Ω–æ–µ –æ–±—â–µ—Å—Ç–≤–æ')
    this.russianAbbreviations.set('–û–ê–û', '–û—Ç–∫—Ä—ã—Ç–æ–µ –∞–∫—Ü–∏–æ–Ω–µ—Ä–Ω–æ–µ –æ–±—â–µ—Å—Ç–≤–æ')
    this.russianAbbreviations.set('–ò–ü', '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å')
  }

  /**
   * Initialize Russian contractions and informal speech patterns
   */
  private initializeContractions(): void {
    // Common Russian contractions in speech
    this.russianContractions.set('–Ω–µ', '–Ω–µ')
    this.russianContractions.set('—â–∞', '—Å–µ–π—á–∞—Å')
    this.russianContractions.set('—Ç–æ–∫–æ', '—Ç–æ–ª—å–∫–æ')
    this.russianContractions.set('–∫–∞–¥–∞', '–∫–æ–≥–¥–∞')
    this.russianContractions.set('—à–æ', '—á—Ç–æ')
    this.russianContractions.set('—á—ë', '—á—Ç–æ')
    this.russianContractions.set('–¥—ã–∫', '–¥–∞')
    this.russianContractions.set('–≤–∞—â–µ', '–≤–æ–æ–±—â–µ')
    this.russianContractions.set('–Ω–∏—Ö—Ä–µ–Ω–∞', '–Ω–∏—á–µ–≥–æ')
    this.russianContractions.set('—Ö—Ä–µ–Ω', '–Ω–∏—á–µ–≥–æ')
    this.russianContractions.set('—á—É—Ç–æ–∫', '—á—É—Ç—å-—á—É—Ç—å')
  }

  /**
   * Initialize sentence boundary patterns
   */
  private initializeSentencePatterns(): void {
    // Russian sentence endings
    this.sentenceEndPatterns = [
      /[.!?‚Ä¶]+\s+(?=[–ê-–Ø–Å])/g, // Standard endings followed by capital letter
      /[.!?‚Ä¶]+\s*$/g, // Endings at end of text
      /[.!?‚Ä¶]+\s+(?=["¬´])/g, // Endings followed by quotes
      /[.!?‚Ä¶]+(?=\s*\n)/g // Endings before newline
    ]
  }

  /**
   * Initialize paragraph break patterns
   */
  private initializeParagraphPatterns(): void {
    // Russian paragraph boundaries
    this.paragraphBreakPatterns = [
      /\n\s*\n/g, // Double newline
      /\.\s*\n\s*(?=[–ê-–Ø–Å])/g, // Period + newline + capital letter
      /[!?‚Ä¶]\s*\n\s*(?=[–ê-–Ø–Å])/g // Exclamation/question + newline + capital
    ]
  }

  /**
   * Normalize Cyrillic text
   */
  private async normalizeCyrillicText(text: string): Promise<{
    text: string
    normalizations: TextNormalization[]
  }> {
    const normalizations: TextNormalization[] = []
    let normalizedText = text

    // Apply character-level normalizations
    for (const [from, to] of this.cyrillicNormalizationMap.entries()) {
      if (from !== to) {
        const regex = new RegExp(from, 'g')
        const matches = [...normalizedText.matchAll(regex)]

        for (const match of matches) {
          if (match.index !== undefined) {
            normalizations.push({
              type: 'cyrillic',
              original: from,
              normalized: to,
              position: {start: match.index, end: match.index + from.length},
              confidence: 0.95,
              reason: `Normalized ${from} to Cyrillic ${to}`
            })
          }
        }

        normalizedText = normalizedText.replace(regex, to)
      }
    }

    // Additional Cyrillic-specific normalizations
    // Remove extra whitespace
    const whitespaceNormalized = normalizedText.replace(/\s+/g, ' ').trim()
    if (whitespaceNormalized !== normalizedText) {
      normalizations.push({
        type: 'whitespace',
        original: normalizedText,
        normalized: whitespaceNormalized,
        position: {start: 0, end: normalizedText.length},
        confidence: 0.9,
        reason: 'Normalized whitespace'
      })
    }

    return {
      text: whitespaceNormalized,
      normalizations
    }
  }

  /**
   * Normalize typography and formatting
   */
  private async normalizeTypography(text: string): Promise<{
    text: string
    normalizations: TextNormalization[]
  }> {
    const normalizations: TextNormalization[] = []
    let normalizedText = text

    // Russian typography rules
    const typographyRules: Array<{pattern: RegExp; replacement: string; reason: string}> = [
      // Russian quotation marks
      {
        pattern: /"([^"]+)"/g,
        replacement: '¬´$1¬ª',
        reason: 'Use Russian quotation marks'
      },
      // Em dash normalization
      {
        pattern: / - /g,
        replacement: ' ‚Äî ',
        reason: 'Use proper em dash'
      },
      // Ellipsis normalization
      {
        pattern: /\.\.\./g,
        replacement: '‚Ä¶',
        reason: 'Use proper ellipsis character'
      },
      // Number separation with non-breaking spaces
      {
        pattern: /(\d)\s(\d{3})\b/g,
        replacement: '$1 $2',
        reason: 'Use proper number formatting'
      }
    ]

    for (const rule of typographyRules) {
      const matches = [...normalizedText.matchAll(rule.pattern)]

      for (const match of matches) {
        if (match.index !== undefined) {
          normalizations.push({
            type: 'typography',
            original: match[0],
            normalized: match[0].replace(rule.pattern, rule.replacement),
            position: {start: match.index, end: match.index + match[0].length},
            confidence: 0.85,
            reason: rule.reason
          })
        }
      }

      normalizedText = normalizedText.replace(rule.pattern, rule.replacement)
    }

    return {
      text: normalizedText,
      normalizations
    }
  }

  /**
   * Expand Russian abbreviations
   */
  private async expandAbbreviations(text: string): Promise<{
    text: string
    normalizations: TextNormalization[]
  }> {
    const normalizations: TextNormalization[] = []
    let expandedText = text

    for (const [abbrev, expansion] of this.russianAbbreviations.entries()) {
      const regex = new RegExp(`\\b${abbrev.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}\\b`, 'g')
      const matches = [...expandedText.matchAll(regex)]

      for (const match of matches) {
        if (match.index !== undefined) {
          normalizations.push({
            type: 'abbreviation',
            original: abbrev,
            normalized: expansion,
            position: {start: match.index, end: match.index + abbrev.length},
            confidence: 0.8,
            reason: `Expanded abbreviation ${abbrev} to ${expansion}`
          })
        }
      }

      expandedText = expandedText.replace(regex, expansion)
    }

    return {
      text: expandedText,
      normalizations
    }
  }

  /**
   * Correct speech patterns and contractions
   */
  private async correctSpeechPatterns(text: string): Promise<{
    text: string
    normalizations: TextNormalization[]
  }> {
    const normalizations: TextNormalization[] = []
    let correctedText = text

    // Apply contraction expansions
    for (const [contraction, expansion] of this.russianContractions.entries()) {
      if (contraction !== expansion) {
        const regex = new RegExp(`\\b${contraction}\\b`, 'gi')
        const matches = [...correctedText.matchAll(regex)]

        for (const match of matches) {
          if (match.index !== undefined) {
            normalizations.push({
              type: 'contraction',
              original: match[0],
              normalized: expansion,
              position: {start: match.index, end: match.index + match[0].length},
              confidence: 0.75,
              reason: `Expanded contraction ${match[0]} to ${expansion}`
            })
          }
        }

        correctedText = correctedText.replace(regex, expansion)
      }
    }

    // Common speech-to-text pattern corrections
    const speechPatterns: Array<{pattern: RegExp; replacement: string; reason: string}> = [
      {
        pattern: /\b—ç+–º+\b/gi,
        replacement: '',
        reason: 'Removed filler word "—ç–º"'
      },
      {
        pattern: /\b–∞+—Ö+\b/gi,
        replacement: '',
        reason: 'Removed filler sound "–∞—Ö"'
      },
      {
        pattern: /\b–Ω—É+ +/gi,
        replacement: '',
        reason: 'Removed excessive "–Ω—É" filler'
      },
      {
        pattern: /\b–≤–æ—Ç+ +/gi,
        replacement: '–≤–æ—Ç ',
        reason: 'Normalized repeated "–≤–æ—Ç"'
      }
    ]

    for (const pattern of speechPatterns) {
      const matches = [...correctedText.matchAll(pattern.pattern)]

      for (const match of matches) {
        if (match.index !== undefined) {
          normalizations.push({
            type: 'contraction',
            original: match[0],
            normalized: pattern.replacement,
            position: {start: match.index, end: match.index + match[0].length},
            confidence: 0.7,
            reason: pattern.reason
          })
        }
      }

      correctedText = correctedText.replace(pattern.pattern, pattern.replacement)
    }

    return {
      text: correctedText,
      normalizations
    }
  }

  /**
   * Segment text into sentences and paragraphs
   */
  private async segmentText(text: string): Promise<SegmentationInfo> {
    const sentences = this.segmentIntoSentences(text)
    const paragraphs = this.segmentIntoParagraphs(text, sentences)

    const totalSentences = sentences.length
    const totalParagraphs = paragraphs.length
    const averageSentenceLength =
      sentences.length > 0
        ? sentences.reduce((sum, s) => sum + s.text.length, 0) / sentences.length
        : 0

    return {
      sentences,
      paragraphs,
      totalSentences,
      totalParagraphs,
      averageSentenceLength
    }
  }

  /**
   * Segment text into sentences
   */
  private segmentIntoSentences(text: string): SentenceSegment[] {
    const sentences: SentenceSegment[] = []

    // Split by sentence boundaries
    const sentenceBoundaries: number[] = []

    for (const pattern of this.sentenceEndPatterns) {
      const matches = [...text.matchAll(pattern)]
      for (const match of matches) {
        if (match.index !== undefined) {
          sentenceBoundaries.push(match.index + match[0].length)
        }
      }
    }

    // Sort boundaries and create segments
    sentenceBoundaries.sort((a, b) => a - b)

    let lastBoundary = 0
    for (const boundary of sentenceBoundaries) {
      if (boundary > lastBoundary) {
        const sentenceText = text.slice(lastBoundary, boundary).trim()
        if (sentenceText.length > 0) {
          sentences.push({
            text: sentenceText,
            startIndex: lastBoundary,
            endIndex: boundary,
            type: this.getSentenceType(sentenceText),
            confidence: 0.8
          })
        }
        lastBoundary = boundary
      }
    }

    // Add final sentence if text doesn't end with punctuation
    if (lastBoundary < text.length) {
      const finalText = text.slice(lastBoundary).trim()
      if (finalText.length > 0) {
        sentences.push({
          text: finalText,
          startIndex: lastBoundary,
          endIndex: text.length,
          type: this.getSentenceType(finalText),
          confidence: 0.7
        })
      }
    }

    return sentences
  }

  /**
   * Determine sentence type
   */
  private getSentenceType(
    sentence: string
  ): 'declarative' | 'interrogative' | 'exclamatory' | 'imperative' {
    const trimmed = sentence.trim()

    if (trimmed.endsWith('?')) return 'interrogative'
    if (trimmed.endsWith('!')) return 'exclamatory'

    // Check for interrogative words in Russian
    const interrogativeWords = [
      '—á—Ç–æ',
      '–∫—Ç–æ',
      '–≥–¥–µ',
      '–∫–æ–≥–¥–∞',
      '–ø–æ—á–µ–º—É',
      '–∑–∞—á–µ–º',
      '–∫–∞–∫',
      '–∫–∞–∫–æ–π',
      '–∫–æ—Ç–æ—Ä—ã–π'
    ]
    const firstWord = trimmed.split(' ')[0]?.toLowerCase()
    if (interrogativeWords.includes(firstWord)) return 'interrogative'

    // Check for imperative mood indicators
    const imperativePatterns = [
      /^[–∞-—è—ë]+—Ç–µ\s/i, // verb + —Ç–µ (formal imperative)
      /^[–∞-—è—ë]+(–π|–∏)\s/i // informal imperative endings
    ]

    for (const pattern of imperativePatterns) {
      if (pattern.test(trimmed)) return 'imperative'
    }

    return 'declarative'
  }

  /**
   * Segment text into paragraphs
   */
  private segmentIntoParagraphs(text: string, sentences: SentenceSegment[]): ParagraphSegment[] {
    const paragraphs: ParagraphSegment[] = []

    // Find paragraph boundaries
    const paragraphBoundaries: number[] = [0]

    for (const pattern of this.paragraphBreakPatterns) {
      const matches = [...text.matchAll(pattern)]
      for (const match of matches) {
        if (match.index !== undefined) {
          paragraphBoundaries.push(match.index + match[0].length)
        }
      }
    }

    paragraphBoundaries.push(text.length)
    paragraphBoundaries.sort((a, b) => a - b)

    // Create paragraph segments
    for (let i = 0; i < paragraphBoundaries.length - 1; i++) {
      const start = paragraphBoundaries[i]
      const end = paragraphBoundaries[i + 1]
      const paragraphText = text.slice(start, end).trim()

      if (paragraphText.length > 0) {
        const paragraphSentences = sentences.filter(s => s.startIndex >= start && s.endIndex <= end)

        paragraphs.push({
          text: paragraphText,
          startIndex: start,
          endIndex: end,
          sentences: paragraphSentences,
          topicConfidence: 0.7
        })
      }
    }

    return paragraphs
  }

  /**
   * Calculate overall processing confidence
   */
  private calculateOverallConfidence(
    languageSegments: LanguageSegment[],
    grammarCorrections: GrammarCorrectionDetail[],
    normalizations: TextNormalization[]
  ): number {
    let totalConfidence = 1.0
    let factors = 1

    // Factor in language detection confidence
    if (languageSegments.length > 0) {
      const avgLanguageConfidence =
        languageSegments.reduce((sum, seg) => sum + seg.confidence, 0) / languageSegments.length
      totalConfidence *= avgLanguageConfidence
      factors++
    }

    // Factor in grammar correction confidence
    if (grammarCorrections.length > 0) {
      const avgGrammarConfidence =
        grammarCorrections.reduce((sum, corr) => sum + (corr.confidence || 0.7), 0) /
        grammarCorrections.length
      totalConfidence *= avgGrammarConfidence
      factors++
    }

    // Factor in normalization confidence
    if (normalizations.length > 0) {
      const avgNormalizationConfidence =
        normalizations.reduce((sum, norm) => sum + norm.confidence, 0) / normalizations.length
      totalConfidence *= avgNormalizationConfidence
      factors++
    }

    // Apply root to prevent over-penalization
    return Math.pow(totalConfidence, 1 / factors)
  }

  /**
   * Update configuration
   */
  updateConfig(newConfig: Partial<RussianPostProcessorConfig>): void {
    this.config = {...this.config, ...newConfig}
  }

  /**
   * Get current configuration
   */
  getConfig(): RussianPostProcessorConfig {
    return {...this.config}
  }

  /**
   * Get processing statistics
   */
  getStatistics(): {
    cyrillicNormalizations: number
    abbreviations: number
    contractions: number
    sentencePatterns: number
    paragraphPatterns: number
  } {
    return {
      cyrillicNormalizations: this.cyrillicNormalizationMap.size,
      abbreviations: this.russianAbbreviations.size,
      contractions: this.russianContractions.size,
      sentencePatterns: this.sentenceEndPatterns.length,
      paragraphPatterns: this.paragraphBreakPatterns.length
    }
  }
}

/**
 * Factory function to create a configured Russian Post-Processor
 */
export function createRussianPostProcessor(
  config: Partial<RussianPostProcessorConfig> = {}
): RussianPostProcessor {
  return new RussianPostProcessor(config)
}

/**
 * Utility function for quick Russian text processing
 */
export async function processRussianText(text: string): Promise<string> {
  const processor = createRussianPostProcessor({
    enableCyrillicNormalization: true,
    enableGrammarCorrection: true,
    enableTypographyNormalization: true,
    confidenceThreshold: 0.7
  })

  const result = await processor.processText(text)
  return result.processedText
}
