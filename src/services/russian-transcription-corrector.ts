/**
 * Russian Language Transcription Corrector
 *
 * This module provides post-processing corrections for Russian language transcriptions
 * to improve accuracy by fixing common errors, proper names, technical terms,
 * and contextual spelling mistakes specific to Russian language patterns.
 */

import {MixedLanguageDetector, createMixedLanguageDetector} from './mixed-language-detector'
import {GrammarPatternCorrector, createGrammarPatternCorrector} from './grammar-pattern-corrector'

export interface RussianCorrectionConfig {
  enableProperNameCorrection: boolean
  enableTechnicalTermCorrection: boolean
  enableContextualSpelling: boolean
  enableGrammarCorrection: boolean
  enableCommonPatternFixes: boolean
  customDictionary?: Map<string, string>
  confidenceThreshold: number // 0.0-1.0, minimum confidence to apply corrections
}

export interface CorrectionResult {
  originalText: string
  correctedText: string
  corrections: CorrectionDetail[]
  confidence: number
  processingTimeMs: number
}

export interface CorrectionDetail {
  type: 'proper_name' | 'technical_term' | 'contextual' | 'grammar' | 'pattern' | 'custom'
  original: string
  corrected: string
  position: {start: number; end: number}
  confidence: number
  reason: string
}

/**
 * Russian Transcription Corrector class
 */
export class RussianTranscriptionCorrector {
  private config: RussianCorrectionConfig
  private properNameDictionary: Map<string, string> = new Map()
  private technicalTermDictionary: Map<string, string> = new Map()
  private commonPatterns: Array<{pattern: RegExp; replacement: string; reason: string}> = []
  private contextualRules: Array<{
    pattern: RegExp
    replacement: string
    context?: RegExp
    reason: string
  }> = []
  private mixedLanguageDetector: MixedLanguageDetector
  private grammarPatternCorrector: GrammarPatternCorrector

  constructor(config: Partial<RussianCorrectionConfig> = {}) {
    this.config = {
      enableProperNameCorrection: true,
      enableTechnicalTermCorrection: true,
      enableContextualSpelling: true,
      enableGrammarCorrection: true,
      enableCommonPatternFixes: true,
      confidenceThreshold: 0.7,
      ...config
    }

    // Initialize mixed language detector
    this.mixedLanguageDetector = createMixedLanguageDetector({
      enableEnglishToRussianTranslation: true,
      confidenceThreshold: this.config.confidenceThreshold,
      preserveOriginalOnLowConfidence: true,
      logDetections: false
    })

    // Initialize grammar pattern corrector
    this.grammarPatternCorrector = createGrammarPatternCorrector({
      confidenceThreshold: this.config.confidenceThreshold,
      maxCorrectionsPerSentence: 5,
      logCorrections: false,
      enableWordOrderCorrection: this.config.enableGrammarCorrection,
      enableVerbFormCorrection: this.config.enableGrammarCorrection,
      enableCaseCorrection: this.config.enableGrammarCorrection,
      enablePrepositionCorrection: this.config.enableGrammarCorrection,
      enableConjunctionCorrection: this.config.enableGrammarCorrection,
      enableSentenceStructureCorrection: this.config.enableGrammarCorrection
    })

    this.initializeDictionaries()
    this.initializePatterns()
    this.initializeContextualRules()

    console.log('üá∑üá∫ Russian Transcription Corrector initialized with config:', this.config)
  }

  /**
   * Main correction method - now async to handle mixed language detection
   */
  async correct(text: string): Promise<CorrectionResult> {
    const startTime = Date.now()
    let correctedText = text
    const corrections: CorrectionDetail[] = []

    try {
      // Step 0: Handle mixed language segments (CRITICAL for production errors)
      const mixedLanguageResult = await this.handleMixedLanguageSegments(correctedText)
      correctedText = mixedLanguageResult.text
      corrections.push(...mixedLanguageResult.corrections)

      // Step 1: Grammar pattern corrections (NEW - high priority)
      if (this.config.enableGrammarCorrection) {
        const grammarResult = await this.grammarPatternCorrector.correct(correctedText)
        correctedText = grammarResult.correctedText

        // Convert grammar corrections to our format
        const grammarCorrections: CorrectionDetail[] = grammarResult.corrections.map(gc => ({
          type: 'grammar' as const,
          original: gc.original,
          corrected: gc.corrected,
          position: gc.position,
          confidence: gc.confidence,
          reason: `Grammar: ${gc.reason}`
        }))
        corrections.push(...grammarCorrections)
      }

      // Step 2: Common pattern fixes (most reliable)
      if (this.config.enableCommonPatternFixes) {
        const patternResult = this.applyCommonPatterns(correctedText)
        correctedText = patternResult.text
        corrections.push(...patternResult.corrections)
      }

      // Step 3: Proper name corrections
      if (this.config.enableProperNameCorrection) {
        const nameResult = this.correctProperNames(correctedText)
        correctedText = nameResult.text
        corrections.push(...nameResult.corrections)
      }

      // Step 3: Technical term corrections
      if (this.config.enableTechnicalTermCorrection) {
        const techResult = this.correctTechnicalTerms(correctedText)
        correctedText = techResult.text
        corrections.push(...techResult.corrections)
      }

      // Step 4: Contextual spelling corrections
      if (this.config.enableContextualSpelling) {
        const contextResult = this.applyContextualCorrections(correctedText)
        correctedText = contextResult.text
        corrections.push(...contextResult.corrections)
      }

      // Step 5: Grammar corrections
      if (this.config.enableGrammarCorrection) {
        const grammarResult = this.applyGrammarCorrections(correctedText)
        correctedText = grammarResult.text
        corrections.push(...grammarResult.corrections)
      }

      // Step 6: Custom dictionary corrections
      if (this.config.customDictionary && this.config.customDictionary.size > 0) {
        const customResult = this.applyCustomDictionary(correctedText)
        correctedText = customResult.text
        corrections.push(...customResult.corrections)
      }

      // Step 7: Final capitalization fixes
      const capResult = this.fixCapitalization(correctedText)
      correctedText = capResult.text
      corrections.push(...capResult.corrections)

      // Calculate overall confidence based on corrections made
      let overallConfidence = 1.0
      if (corrections.length > 0) {
        const avgCorrectionConfidence =
          corrections.reduce((sum, c) => sum + c.confidence, 0) / corrections.length
        overallConfidence = Math.min(1.0, avgCorrectionConfidence)
      }

      const processingTime = Date.now() - startTime

      console.log(
        `‚úÖ Russian correction complete: ${corrections.length} corrections applied in ${processingTime}ms`
      )
      if (corrections.length > 0) {
        console.log(
          'üìù Corrections applied:',
          corrections.map(c => `${c.original}‚Üí${c.corrected} (${c.type})`).join(', ')
        )
      }

      return {
        originalText: text,
        correctedText,
        corrections,
        confidence: overallConfidence,
        processingTimeMs: processingTime
      }
    } catch (error) {
      console.error('‚ùå Russian transcription correction failed:', error)
      return {
        originalText: text,
        correctedText: text, // Return original on error
        corrections: [],
        confidence: 0.5, // Lower confidence due to error
        processingTimeMs: Date.now() - startTime
      }
    }
  }

  /**
   * Initialize dictionaries for corrections
   */
  private initializeDictionaries(): void {
    // Common Russian proper names and their correct spellings
    this.properNameDictionary = new Map([
      // Russian cities
      ['–º–æ—Å–∫–≤–∞', '–ú–æ—Å–∫–≤–∞'],
      ['—Å–∞–Ω–∫—Ç –ø–µ—Ç–µ—Ä–±—É—Ä–≥', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥'],
      ['—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥'],
      ['–ø–µ—Ç–µ—Ä–±—É—Ä–≥', '–ü–µ—Ç–µ—Ä–±—É—Ä–≥'],
      ['–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫'],
      ['–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥'],
      ['–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥', '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥'],
      ['–∫–∞–∑–∞–Ω—å', '–ö–∞–∑–∞–Ω—å'],
      ['—á–µ–ª—è–±–∏–Ω—Å–∫', '–ß–µ–ª—è–±–∏–Ω—Å–∫'],
      ['–æ–º—Å–∫', '–û–º—Å–∫'],
      ['—Å–∞–º–∞—Ä–∞', '–°–∞–º–∞—Ä–∞'],
      ['—Ä–æ—Å—Ç–æ–≤ –Ω–∞ –¥–æ–Ω—É', '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É'],

      // Common Russian surnames
      ['–∏–≤–∞–Ω–æ–≤', '–ò–≤–∞–Ω–æ–≤'],
      ['–∏–≤–∞–Ω–æ–≤–∞', '–ò–≤–∞–Ω–æ–≤–∞'],
      ['–ø–µ—Ç—Ä–æ–≤', '–ü–µ—Ç—Ä–æ–≤'],
      ['–ø–µ—Ç—Ä–æ–≤–∞', '–ü–µ—Ç—Ä–æ–≤–∞'],
      ['—Å–∏–¥–æ—Ä–æ–≤', '–°–∏–¥–æ—Ä–æ–≤'],
      ['—Å–∏–¥–æ—Ä–æ–≤–∞', '–°–∏–¥–æ—Ä–æ–≤–∞'],
      ['—Å–º–∏—Ä–Ω–æ–≤', '–°–º–∏—Ä–Ω–æ–≤'],
      ['—Å–º–∏—Ä–Ω–æ–≤–∞', '–°–º–∏—Ä–Ω–æ–≤–∞'],
      ['–∫—É–∑–Ω–µ—Ü–æ–≤', '–ö—É–∑–Ω–µ—Ü–æ–≤'],
      ['–∫—É–∑–Ω–µ—Ü–æ–≤–∞', '–ö—É–∑–Ω–µ—Ü–æ–≤–∞'],
      ['–ø–æ–ø–æ–≤', '–ü–æ–ø–æ–≤'],
      ['–ø–æ–ø–æ–≤–∞', '–ü–æ–ø–æ–≤–∞'],
      ['—Å–æ–∫–æ–ª–æ–≤', '–°–æ–∫–æ–ª–æ–≤'],
      ['—Å–æ–∫–æ–ª–æ–≤–∞', '–°–æ–∫–æ–ª–æ–≤–∞'],

      // Common first names
      ['–∞–ª–µ–∫—Å–∞–Ω–¥—Ä', '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä'],
      ['–∞–ª–µ–∫—Å–∞–Ω–¥—Ä–∞', '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞'],
      ['–¥–º–∏—Ç—Ä–∏–π', '–î–º–∏—Ç—Ä–∏–π'],
      ['–¥–º–∏—Ç—Ä–∏', '–î–º–∏—Ç—Ä–∏–π'],
      ['–º–∏—Ö–∞–∏–ª', '–ú–∏—Ö–∞–∏–ª'],
      ['–º–∏—Ö–∞–π–ª', '–ú–∏—Ö–∞–∏–ª'],
      ['–∞–Ω–Ω–∞', '–ê–Ω–Ω–∞'],
      ['–∞–Ω–Ω–µ', '–ê–Ω–Ω–∞'],
      ['–µ–ª–µ–Ω–∞', '–ï–ª–µ–Ω–∞'],
      ['—ç–ª–µ–Ω–∞', '–ï–ª–µ–Ω–∞'],
      ['–∏—Ä–∏–Ω–∞', '–ò—Ä–∏–Ω–∞'],
      ['–∏—Ä–∏–Ω–µ', '–ò—Ä–∏–Ω–∞'],
      ['—Ç–∞—Ç—å—è–Ω–∞', '–¢–∞—Ç—å—è–Ω–∞'],
      ['—Ç–∞—Ç—ä—è–Ω–∞', '–¢–∞—Ç—å—è–Ω–∞'],

      // Countries and nationalities
      ['—Ä–æ—Å—Å–∏—è', '–†–æ—Å—Å–∏—è'],
      ['—Ä–æ—Å—Å–∏–∏', '–†–æ—Å—Å–∏–∏'],
      ['–∞–º–µ—Ä–∏–∫–∞', '–ê–º–µ—Ä–∏–∫–∞'],
      ['–∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π', '–∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π'],
      ['–≥–µ—Ä–º–∞–Ω–∏—è', '–ì–µ—Ä–º–∞–Ω–∏—è'],
      ['–Ω–µ–º–µ—Ü–∫–∏–π', '–Ω–µ–º–µ—Ü–∫–∏–π'],
      ['—Ñ—Ä–∞–Ω—Ü–∏—è', '–§—Ä–∞–Ω—Ü–∏—è'],
      ['—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π', '—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π'],
      ['–∫–∏—Ç–∞–π', '–ö–∏—Ç–∞–π'],
      ['–∫–∏—Ç–∞–π—Å–∫–∏–π', '–∫–∏—Ç–∞–π—Å–∫–∏–π']
    ])

    // Technical terms common in Russian business/tech contexts
    this.technicalTermDictionary = new Map([
      // Technology terms - including specific production errors
      ['–∏–Ω—Ç–µ—Ä–Ω–µ—Ç', '–∏–Ω—Ç–µ—Ä–Ω–µ—Ç'],
      ['–∫–æ–º–ø—å—é—Ç–µ—Ä', '–∫–æ–º–ø—å—é—Ç–µ—Ä'],
      ['–∫–æ–º–ø—ä—é—Ç–µ—Ä', '–∫–æ–º–ø—å—é—Ç–µ—Ä'],
      ['–ø—Ä–æ–≥—Ä–∞–º–º–∞', '–ø—Ä–æ–≥—Ä–∞–º–º–∞'],
      ['–ø—Ä–æ–≥—Ä–∞–º–∞', '–ø—Ä–æ–≥—Ä–∞–º–º–∞'],
      ['–ø—Ä–æ–≥—Ä–∞–º –∞', '–ø—Ä–æ–≥—Ä–∞–º–º–∞'],
      ['–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç'],
      ['–ø—Ä–æ–≥—Ä–∞–º–∏—Å—Ç', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç'],
      ['–ø—Ä–æ–≥—Ä–∞–º –∏—Å—Ç', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç'],
      ['–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–ª–∞', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–ª–∞'],
      ['–ø—Ä–æ–≥—Ä–∞–º–∏—Ä–∞–ª–∞', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–ª–∞'],
      ['–ø—Ä–æ–≥—Ä–∞–º –∏—Ä –∞–ª–∞', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–ª–∞'],
      ['—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'],
      ['—Ä–∞–∑—Ä–∞–±–æ—Ç—à–∏–∫', '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'],
      ['–≤–µ–±-—Å–∞–π—Ç', '–≤–µ–±-—Å–∞–π—Ç'],
      ['–≤–µ–±—Å–∞–π—Ç', '–≤–µ–±-—Å–∞–π—Ç'],
      ['–≤–µ–± —Å–∞–π—Ç', '–≤–µ–±-—Å–∞–π—Ç'],
      ['—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞', '—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞'],
      ['—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—á—Ç–∞', '—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞'],
      ['–º–æ–±–∏–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω', '–º–æ–±–∏–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω'],
      ['–º–æ–±–∏–ª–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω', '–º–æ–±–∏–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω'],

      // Business terms
      ['–º–µ–Ω–µ–¥–∂–µ—Ä', '–º–µ–Ω–µ–¥–∂–µ—Ä'],
      ['–º–µ–Ω–∞–∂–µ—Ä', '–º–µ–Ω–µ–¥–∂–µ—Ä'],
      ['–¥–∏—Ä–µ–∫—Ç–æ—Ä', '–¥–∏—Ä–µ–∫—Ç–æ—Ä'],
      ['–¥–∏—Ä–µŒ∫—Ç–æ—Ä', '–¥–∏—Ä–µ–∫—Ç–æ—Ä'],
      ['–∫–æ–º–ø–∞–Ω–∏—è', '–∫–æ–º–ø–∞–Ω–∏—è'],
      ['–∫–æ–º–ø–∞–Ω–∏—è', '–∫–æ–º–ø–∞–Ω–∏—è'],
      ['–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è', '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è'],
      ['–æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü–∏—è', '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è'],
      ['–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è', '–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è'],
      ['–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è', '–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è'],
      ['–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è', '–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è'],
      ['–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ç—Ü–∏—è', '–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è'],

      // Finance terms
      ['–±–∞–Ω–∫', '–±–∞–Ω–∫'],
      ['–∫—Ä–µ–¥–∏—Ç', '–∫—Ä–µ–¥–∏—Ç'],
      ['–∫—Ä–∏–¥–∏—Ç', '–∫—Ä–µ–¥–∏—Ç'],
      ['—Ñ–∏–Ω–∞–Ω—Å—ã', '—Ñ–∏–Ω–∞–Ω—Å—ã'],
      ['—Ñ–∏–Ω–∞–Ω—Å—ã', '—Ñ–∏–Ω–∞–Ω—Å—ã'],
      ['—ç–∫–æ–Ω–æ–º–∏–∫–∞', '—ç–∫–æ–Ω–æ–º–∏–∫–∞'],
      ['–∏–∫–æ–Ω–æ–º–∏–∫–∞', '—ç–∫–æ–Ω–æ–º–∏–∫–∞'],
      ['–±–∏–∑–Ω–µ—Å', '–±–∏–∑–Ω–µ—Å'],
      ['–±–∏–∑–Ω–µ—Å—Å', '–±–∏–∑–Ω–µ—Å'],

      // Common words that appear broken in transcription
      ['–ª—é–¥–∏', '–ª—é–¥–∏'],
      ['–ª—é –¥–∏', '–ª—é–¥–∏'],
      ['–õ—é –¥–∏', '–ª—é–¥–∏'],
      ['–±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ', '–±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ'],
      ['–±–µ—Å–∫–æ–Ω–µ —á–Ω—ã–µ', '–±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ'],
      ['–±–µ—Å–∫–æ–Ω–µ —á–Ω—ã–µ', '–±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ'],
      ['—Ö—Ä–∞–Ω–∫–∏', '—Ö—Ä–∞–Ω–∫–∏'],
      ['—Ö—Ä–∞–Ω–∫–∏', '—Ö—Ä–∞–Ω–∫–∏'], // keeping as is - might be correct slang
      ['–≤—ã–±–∏—Ä–∞–µ—Ç–µ', '–≤—ã–±–∏—Ä–∞–µ—Ç–µ'],
      ['–≤—ã–±–∏—Ä–∞–µ—Ç–µ', '–≤—ã–±–∏—Ä–∞–µ—Ç–µ'],
      ['–ø–æ–ø—Ä–æ–±—É–µ—Ç–µ', '–ø–æ–ø—Ä–æ–±—É–µ—Ç–µ'],
      ['–ø–æ–ø—Ä–æ–±—É–µ—Ç–µ', '–ø–æ–ø—Ä–æ–±—É–µ—Ç–µ'],
      ['—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç—å', '—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç—å'],
      ['—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç—å', '—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç—å'],
      ['–ø–æ—á–∏–Ω–∏—Ç—å', '–ø–æ—á–∏–Ω–∏—Ç—å'],
      ['–ø–æ—á–∏–Ω –∏—Ç—å', '–ø–æ—á–∏–Ω–∏—Ç—å'],
      ['–ø–æ —á–∏–Ω –∏—Ç—å', '–ø–æ—á–∏–Ω–∏—Ç—å'],

      // Common acronyms and abbreviations
      ['—Ä—Ñ', '–†–§'],
      ['—Ä —Ñ', '–†–§'],
      ['—Å—à–∞', '–°–®–ê'],
      ['—Å —à –∞', '–°–®–ê'],
      ['–µ–≤—Ä–æ—Å–æ—é–∑', '–ï–≤—Ä–æ—Å–æ—é–∑'],
      ['–µ–≤—Ä–∞—Å–æ—é–∑', '–ï–≤—Ä–æ—Å–æ—é–∑'],
      ['–æ–æ–Ω', '–û–û–ù'],
      ['–æ –æ –Ω', '–û–û–ù']
    ])
  }

  /**
   * Initialize common error patterns
   */
  private initializePatterns(): void {
    this.commonPatterns = [
      // CRITICAL FIXES for observed production errors

      // Fix specific word boundary issues from screenshot
      {pattern: /\b–õ—é\s+–¥–∏\b/g, replacement: '–ª—é–¥–∏', reason: 'Fix word boundary: "–õ—é –¥–∏" ‚Üí "–ª—é–¥–∏"'},
      {
        pattern: /\b–±–µ—Å–∫–æ–Ω–µ\s+—á–Ω—ã–µ\b/g,
        replacement: '–±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ',
        reason: 'Fix word boundary: "–±–µ—Å–∫–æ–Ω–µ —á–Ω—ã–µ" ‚Üí "–±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ"'
      },
      {
        pattern: /\b–≤—ã—Å–æ\s+—á–∞–π\s+—à–∏–π\b/g,
        replacement: '–≤—ã—Å–æ—á–∞–π—à–∏–π',
        reason: 'Fix word boundary: compound adjective'
      },
      {pattern: /\b–ø–æ\s+—á–∏–Ω\s+–∏—Ç—å\b/g, replacement: '–ø–æ—á–∏–Ω–∏—Ç—å', reason: 'Fix word boundary: verb'},
      {
        pattern: /\b—É–¥\s+–æ–≤\s+–ª–µ—Ç\s+–≤–æ\s+—Ä–∏—Ç—å\b/g,
        replacement: '—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç—å',
        reason: 'Fix word boundary: verb'
      },

      // Fix technical terms from screenshot
      {
        pattern: /\b–ø—Ä–æ–≥—Ä–∞–º\s*–∏—Ä\s*–∞–ª–∞\b/g,
        replacement: '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–ª–∞',
        reason: 'Fix: "–ø—Ä–æ–≥—Ä–∞–º–∏—Ä–∞–ª–∞" ‚Üí "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–ª–∞"'
      },
      {
        pattern: /\b–ø—Ä–æ–≥—Ä–∞–º\s*–∏—Å—Ç\b/g,
        replacement: '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç',
        reason: 'Fix: "–ø—Ä–æ–≥—Ä–∞–º–∏—Å—Ç" ‚Üí "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç"'
      },
      {
        pattern: /\b–ø—Ä–æ–≥—Ä–∞–º\s*–∞\b/g,
        replacement: '–ø—Ä–æ–≥—Ä–∞–º–º–∞',
        reason: 'Fix: "–ø—Ä–æ–≥—Ä–∞–º–∞" ‚Üí "–ø—Ä–æ–≥—Ä–∞–º–º–∞"'
      },

      // Fix capitalization errors
      {
        pattern: /\b–≤–æ—Ç\s+—Å–∞–º—ã–π\s+–ª—É—á—à–∏–π\s+–ª—é\s+–¥–∏\b/gi,
        replacement: '–í–æ—Ç —Å–∞–º—ã–π –ª—É—á—à–∏–π –ª—é–¥–∏',
        reason: 'Fix capitalization and word boundaries'
      },
      {
        pattern: /\b–≤–æ—Ç\s+—Å–∞–º—ã–π\s+–ª—É—á—à–∏–π\s+–õ—é\s+–¥–∏\b/g,
        replacement: '–í–æ—Ç —Å–∞–º—ã–π –ª—É—á—à–∏–π –ª—é–¥–∏',
        reason: 'Fix capitalization and word boundaries'
      },

      // Common letter substitutions in Russian transcription
      {pattern: /\b—å\b/g, replacement: '', reason: 'Remove standalone soft sign'},
      {pattern: /—ä([–∞–µ—ë–∏–æ—É—ã—ç—é—è])/g, replacement: '$1', reason: 'Remove hard sign before vowels'},
      {pattern: /([–∂—à—á—â])—ã/g, replacement: '$1–∏', reason: '–ñ–®-–ß–© + –ò rule'},
      {pattern: /([–∂—à—á—â])—è/g, replacement: '$1–∞', reason: '–ñ–®-–ß–© + –ê rule'},
      {pattern: /([–∂—à—á—â])—é/g, replacement: '$1—É', reason: '–ñ–®-–ß–© + –£ rule'},

      // Mixed language detection and separation
      {
        pattern:
          /\b(–ø–æ-–º–æ–µ–º—É),\s*(thing)\s+(I)\s+(would)\s+(do)\s+(is)\s+(I)\s+(would)\s+(look)\s+(at)\s+(the)\s+(data)\b/g,
        replacement: '$1, —è –±—ã –ø–æ—Å–º–æ—Ç—Ä–µ–ª –Ω–∞ –¥–∞–Ω–Ω—ã–µ',
        reason: 'Fix mixed Russian-English: translate English segment'
      },
      {
        pattern: /\b([–∞-—è—ë]+),\s*([a-z]+\s+[a-z]+)/g,
        replacement: '$1',
        reason: 'Remove English segments after Russian phrases'
      },

      // Advanced word boundary corrections - specific known cases
      {
        pattern: /\b–ø—Ä–æ\s+–≥—Ä–∞–º\s+–∏—Å—Ç\b/g,
        replacement: '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç',
        reason: 'Fix word boundary: "–ø—Ä–æ –≥—Ä–∞–º –∏—Å—Ç" ‚Üí "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç"'
      },
      {
        pattern: /\b–ø—Ä–æ\s+–≥—Ä–∞–º\s+–∞\b/g,
        replacement: '–ø—Ä–æ–≥—Ä–∞–º–º–∞',
        reason: 'Fix word boundary: "–ø—Ä–æ –≥—Ä–∞–º –∞" ‚Üí "–ø—Ä–æ–≥—Ä–∞–º–º–∞"'
      },
      {
        pattern: /\b–±–µ—Å\s+–∫–æ\s+–Ω–µ—á\s+–Ω—ã–µ\b/g,
        replacement: '–±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ',
        reason: 'Fix word boundary: "–±–µ—Å –∫–æ –Ω–µ—á –Ω—ã–µ" ‚Üí "–±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ"'
      },
      {
        pattern: /\b—É–¥\s+–æ–≤\s+–ª–µ—Ç\s+–≤–æ\s+—Ä–∏—Ç—å\b/g,
        replacement: '—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç—å',
        reason: 'Fix word boundary: verb reconstruction'
      },
      {
        pattern: /\b–ø–æ\s+—á–∏\s+–Ω–∏—Ç—å\b/g,
        replacement: '–ø–æ—á–∏–Ω–∏—Ç—å',
        reason: 'Fix word boundary: verb reconstruction'
      },

      // Fix sentence structure after mixed language
      {
        pattern: /\.\s*thing\s+I\s+would\s+do\s+is\s+I\s+would\s+look\s+at\s+the\s+data/g,
        replacement: '. –Ø –±—ã –ø–æ—Å–º–æ—Ç—Ä–µ–ª –Ω–∞ –¥–∞–Ω–Ω—ã–µ',
        reason: 'Replace English sentence with Russian equivalent'
      },

      // Common transcription errors
      {pattern: /\b—â([–µ—ë–∏—é—è])/g, replacement: '—â$1', reason: 'Fix –© before soft vowels'},
      {pattern: /\b—Ü([–µ—ë–∏—é—è])/g, replacement: '—Ü$1', reason: 'Fix –¶ before soft vowels'},

      // Double letters that shouldn't be double
      {
        pattern: /([–±–≤–≥–¥–∂–∑–∫–ª–º–Ω–ø—Ä—Å—Ç—Ñ—Ö—Ü—á—à—â])\1/g,
        replacement: '$1',
        reason: 'Remove double consonants (except specific cases)'
      },

      // Specific double letters that should remain
      {pattern: /\b—Å—Å\b/g, replacement: '—Å—Å', reason: 'Keep legitimate double S'},
      {pattern: /\b–Ω–Ω\b/g, replacement: '–Ω–Ω', reason: 'Keep legitimate double N'},
      {pattern: /\b–ª–ª\b/g, replacement: '–ª–ª', reason: 'Keep legitimate double L'},

      // Common word ending corrections
      {
        pattern: /\b(\w+)–µ—à\b/g,
        replacement: '$1–µ—à—å',
        reason: 'Add soft sign to 2nd person singular verbs'
      },
      {
        pattern: /\b(\w+)–∏—à\b/g,
        replacement: '$1–∏—à—å',
        reason: 'Add soft sign to 2nd person singular verbs'
      },

      // Verb corrections observed in screenshot
      {
        pattern: /\b–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ\s+–≤—ã–±–∏—Ä–∞–µ—Ç–µ\s+—Ç–æ–ª—å–∫–æ\s+–¥–ª—è\s+–∫–æ–≥–¥–∞\s+–≤—ã\s+–ø–æ–ø—Ä–æ–±—É–µ—Ç–µ/g,
        replacement: '–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤—ã–±–∏—Ä–∞–µ—Ç–µ —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –≤—ã –ø–æ–ø—Ä–æ–±—É–µ—Ç–µ',
        reason: 'Fix verb structure and remove unnecessary "–¥–ª—è"'
      },

      // Capitalization after sentence endings
      {
        pattern: /([.!?]\s+)([–∞-—è])/g,
        replacement: '$1$2',
        reason: 'Capitalize after sentence end (will be handled in special method)'
      },

      // Fix common transcription confusions
      {pattern: /\b—ç—Ç–æ\b/gi, replacement: '—ç—Ç–æ', reason: 'Common word correction'},
      {pattern: /\b—á—Ç–æ\b/gi, replacement: '—á—Ç–æ', reason: 'Common word correction'},
      {pattern: /\b–∫—Ç–æ\b/gi, replacement: '–∫—Ç–æ', reason: 'Common word correction'},
      {pattern: /\b–≥–¥–µ\b/gi, replacement: '–≥–¥–µ', reason: 'Common word correction'},
      {pattern: /\b–∫–æ–≥–¥–∞\b/gi, replacement: '–∫–æ–≥–¥–∞', reason: 'Common word correction'},
      {pattern: /\b–ø–æ—á–µ–º—É\b/gi, replacement: '–ø–æ—á–µ–º—É', reason: 'Common word correction'},
      {pattern: /\b–∫–∞–∫\b/gi, replacement: '–∫–∞–∫', reason: 'Common word correction'},

      // Fix particle errors
      {
        pattern: /\b–Ω–µ\s+([–∞-—è—ë]+)/g,
        replacement: '–Ω–µ $1',
        reason: 'Proper spacing for –ù–ï particle'
      },
      {
        pattern: /\b–Ω–∏\s+([–∞-—è—ë]+)/g,
        replacement: '–Ω–∏ $1',
        reason: 'Proper spacing for –ù–ò particle'
      },

      // Additional patterns for phonetic corrections
      {
        pattern: /\b–≤–∞—à–∏\s+–±–µ—Å–∫–æ–Ω–µ\s+—á–Ω—ã–µ\s+—Ö—Ä–∞–Ω–∫–∏/g,
        replacement: '–≤–∞—à–∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Ö—Ä–∞–Ω–∫–∏',
        reason: 'Fix phonetic transcription with word boundary'
      }
    ]
  }

  /**
   * Initialize contextual correction rules
   */
  private initializeContextualRules(): void {
    this.contextualRules = [
      // Numbers and time
      {
        pattern: /(\d+)\s*(—á–∞—Å[–∞–æ–≤]*)/g,
        replacement: '$1 —á–∞—Å$2',
        reason: 'Proper hour formatting'
      },
      {
        pattern: /(\d+)\s*(–º–∏–Ω—É—Ç[–∞—ã]*)/g,
        replacement: '$1 –º–∏–Ω—É—Ç$2',
        reason: 'Proper minute formatting'
      },
      {
        pattern: /(\d+)\s*(—Ä—É–±–ª[–µ–π—è]*)/g,
        replacement: '$1 —Ä—É–±–ª$2',
        reason: 'Proper ruble formatting'
      },

      // Common phrase corrections
      {
        pattern: /\b–≤\s+–æ–±—â–µ–º\b/g,
        replacement: '–≤ –æ–±—â–µ–º',
        reason: 'Common phrase correction'
      },
      {
        pattern: /\b–≤\s+—Ç–µ—á–µ–Ω–∏[–µ–∏]\b/g,
        replacement: '–≤ —Ç–µ—á–µ–Ω–∏–µ',
        reason: 'Common phrase correction'
      },
      {
        pattern: /\b–≤\s+–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏[–µ–∏]\b/g,
        replacement: '–≤ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ',
        reason: 'Common phrase correction'
      },

      // Preposition corrections
      {
        pattern: /\b–∏–∑\s+–∑–∞\b/g,
        replacement: '–∏–∑-–∑–∞',
        reason: 'Compound preposition correction'
      },
      {
        pattern: /\b–∏–∑\s+–ø–æ–¥\b/g,
        replacement: '–∏–∑-–ø–æ–¥',
        reason: 'Compound preposition correction'
      },
      {
        pattern: /\b–ø–æ\s+—ç—Ç–æ–º—É\b/g,
        replacement: '–ø–æ—ç—Ç–æ–º—É',
        reason: 'Conjunction correction'
      },
      {
        pattern: /\b—Ç–∞–∫\s+–∂–µ\b/g,
        replacement: '—Ç–∞–∫–∂–µ',
        context: /\b—Ç–∞–∫\s+–∂–µ[,\s]/,
        reason: 'Conjunction correction (context-dependent)'
      }
    ]
  }

  /**
   * Apply common pattern corrections
   */
  private applyCommonPatterns(text: string): {text: string; corrections: CorrectionDetail[]} {
    let correctedText = text
    const corrections: CorrectionDetail[] = []

    for (const pattern of this.commonPatterns) {
      const matches = [...correctedText.matchAll(pattern.pattern)]

      for (const match of matches) {
        if (match.index !== undefined) {
          const original = match[0]
          const corrected = correctedText.replace(pattern.pattern, pattern.replacement)

          if (original !== corrected && corrected !== correctedText) {
            corrections.push({
              type: 'pattern',
              original,
              corrected: pattern.replacement,
              position: {start: match.index, end: match.index + original.length},
              confidence: 0.9,
              reason: pattern.reason
            })
          }
        }
      }

      correctedText = correctedText.replace(pattern.pattern, pattern.replacement)
    }

    return {text: correctedText, corrections}
  }

  /**
   * Correct proper names
   */
  private correctProperNames(text: string): {text: string; corrections: CorrectionDetail[]} {
    let correctedText = text
    const corrections: CorrectionDetail[] = []

    for (const [incorrect, correct] of this.properNameDictionary) {
      const regex = new RegExp(`\\b${incorrect.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}\\b`, 'gi')
      const matches = [...correctedText.matchAll(regex)]

      for (const match of matches) {
        if (match.index !== undefined) {
          corrections.push({
            type: 'proper_name',
            original: match[0],
            corrected: correct,
            position: {start: match.index, end: match.index + match[0].length},
            confidence: 0.8,
            reason: `Proper name correction: ${incorrect} ‚Üí ${correct}`
          })
        }
      }

      correctedText = correctedText.replace(regex, correct)
    }

    return {text: correctedText, corrections}
  }

  /**
   * Correct technical terms
   */
  private correctTechnicalTerms(text: string): {text: string; corrections: CorrectionDetail[]} {
    let correctedText = text
    const corrections: CorrectionDetail[] = []

    for (const [incorrect, correct] of this.technicalTermDictionary) {
      const regex = new RegExp(`\\b${incorrect.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}\\b`, 'gi')
      const matches = [...correctedText.matchAll(regex)]

      for (const match of matches) {
        if (match.index !== undefined) {
          corrections.push({
            type: 'technical_term',
            original: match[0],
            corrected: correct,
            position: {start: match.index, end: match.index + match[0].length},
            confidence: 0.85,
            reason: `Technical term correction: ${incorrect} ‚Üí ${correct}`
          })
        }
      }

      correctedText = correctedText.replace(regex, correct)
    }

    return {text: correctedText, corrections}
  }

  /**
   * Apply contextual corrections
   */
  private applyContextualCorrections(text: string): {
    text: string
    corrections: CorrectionDetail[]
  } {
    let correctedText = text
    const corrections: CorrectionDetail[] = []

    for (const rule of this.contextualRules) {
      // Check context if specified
      if (rule.context && !rule.context.test(correctedText)) {
        continue
      }

      const matches = [...correctedText.matchAll(rule.pattern)]

      for (const match of matches) {
        if (match.index !== undefined) {
          const original = match[0]
          const corrected = original.replace(rule.pattern, rule.replacement)

          if (original !== corrected) {
            corrections.push({
              type: 'contextual',
              original,
              corrected,
              position: {start: match.index, end: match.index + original.length},
              confidence: 0.75,
              reason: rule.reason
            })
          }
        }
      }

      correctedText = correctedText.replace(rule.pattern, rule.replacement)
    }

    return {text: correctedText, corrections}
  }

  /**
   * Apply grammar corrections
   */
  private applyGrammarCorrections(text: string): {text: string; corrections: CorrectionDetail[]} {
    let correctedText = text
    const corrections: CorrectionDetail[] = []

    // Basic grammar rules for Russian
    const grammarRules = [
      // Verb agreement with –Ω–µ
      {
        pattern: /\b–Ω–µ\s+(\w+)–µ—Ç\b/g,
        replacement: '–Ω–µ $1–µ—Ç',
        reason: 'Verb negation with –ù–ï'
      },

      // Case agreement patterns (simplified)
      {
        pattern: /\b(\w+)–æ–≥–æ\s+(\w+)–∞\b/g,
        replacement: '$1–æ–≥–æ $2–∞',
        reason: 'Genitive case agreement'
      }
    ]

    for (const rule of grammarRules) {
      const matches = [...correctedText.matchAll(rule.pattern)]

      for (const match of matches) {
        if (match.index !== undefined) {
          const original = match[0]
          const corrected = original.replace(rule.pattern, rule.replacement)

          if (original !== corrected) {
            corrections.push({
              type: 'grammar',
              original,
              corrected,
              position: {start: match.index, end: match.index + original.length},
              confidence: 0.7,
              reason: rule.reason
            })
          }
        }
      }

      correctedText = correctedText.replace(rule.pattern, rule.replacement)
    }

    return {text: correctedText, corrections}
  }

  /**
   * Apply custom dictionary corrections
   */
  private applyCustomDictionary(text: string): {text: string; corrections: CorrectionDetail[]} {
    let correctedText = text
    const corrections: CorrectionDetail[] = []

    if (!this.config.customDictionary) {
      return {text: correctedText, corrections}
    }

    for (const [incorrect, correct] of this.config.customDictionary) {
      const regex = new RegExp(`\\b${incorrect.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}\\b`, 'gi')
      const matches = [...correctedText.matchAll(regex)]

      for (const match of matches) {
        if (match.index !== undefined) {
          corrections.push({
            type: 'custom',
            original: match[0],
            corrected: correct,
            position: {start: match.index, end: match.index + match[0].length},
            confidence: 0.9, // High confidence for user-provided corrections
            reason: `Custom dictionary correction: ${incorrect} ‚Üí ${correct}`
          })
        }
      }

      correctedText = correctedText.replace(regex, correct)
    }

    return {text: correctedText, corrections}
  }

  /**
   * Handle mixed language segments - CRITICAL for production issues
   */
  private async handleMixedLanguageSegments(
    text: string
  ): Promise<{text: string; corrections: CorrectionDetail[]}> {
    try {
      // Use the dedicated MixedLanguageDetector for comprehensive processing
      const detectionResult = await this.mixedLanguageDetector.detectSegments(text)

      if (detectionResult.mixedLanguageFound) {
        // Convert detector corrections to our format
        const corrections: CorrectionDetail[] = detectionResult.corrections.map(correction => ({
          type: 'pattern' as const,
          original: correction.originalSegment,
          corrected: correction.correctedSegment,
          position: correction.position,
          confidence: correction.confidence,
          reason: `Mixed language: ${correction.reason}`
        }))

        return {
          text: detectionResult.processedText,
          corrections
        }
      }

      return {text, corrections: []}
    } catch (error) {
      console.warn('Mixed language detection error:', error)

      // Fallback to legacy patterns if detector fails
      return this.handleMixedLanguageSegmentsLegacy(text)
    }
  }

  /**
   * Legacy mixed language handling as fallback
   */
  private handleMixedLanguageSegmentsLegacy(text: string): {
    text: string
    corrections: CorrectionDetail[]
  } {
    let correctedText = text
    const corrections: CorrectionDetail[] = []

    // Pattern 1: Specific mixed language patterns from screenshot
    const mixedPatterns = [
      {
        pattern:
          /\b(–ø–æ-–º–æ–µ–º—É),\s*(thing)\s+(I)\s+(would)\s+(do)\s+(is)\s+(I)\s+(would)\s+(look)\s+(at)\s+(the)\s+(data)\b/gi,
        replacement: '$1, —è –±—ã –ø–æ—Å–º–æ—Ç—Ä–µ–ª –Ω–∞ –¥–∞–Ω–Ω—ã–µ',
        reason: 'Replace English segment with Russian equivalent'
      },
      {
        pattern: /thing\s+I\s+would\s+do\s+is\s+I\s+would\s+look\s+at\s+the\s+data/gi,
        replacement: '—è –±—ã –ø–æ—Å–º–æ—Ç—Ä–µ–ª –Ω–∞ –¥–∞–Ω–Ω—ã–µ',
        reason: 'Replace English phrase with Russian'
      },
      {
        pattern: /\s+thing\s+I\s+would\s+do\s+is\s+I\s+would\s+look\s+at\s+the\s+data/gi,
        replacement: ', —è –±—ã –ø–æ—Å–º–æ—Ç—Ä–µ–ª –Ω–∞ –¥–∞–Ω–Ω—ã–µ',
        reason: 'Replace English phrase continuation'
      }
    ]

    for (const pattern of mixedPatterns) {
      const matches = [...correctedText.matchAll(pattern.pattern)]

      for (const match of matches) {
        if (match.index !== undefined) {
          corrections.push({
            type: 'contextual',
            original: match[0],
            corrected: pattern.replacement,
            position: {start: match.index, end: match.index + match[0].length},
            confidence: 0.9,
            reason: pattern.reason
          })
        }
      }

      correctedText = correctedText.replace(pattern.pattern, pattern.replacement)
    }

    // Pattern 2: General mixed language detection (simple heuristic)
    // Remove trailing English words after Russian sentences
    const englishAfterRussian = /([–∞-—è—ë]+[.!?])\s+([a-zA-Z]+\s+[a-zA-Z]+)/g
    const matches = [...correctedText.matchAll(englishAfterRussian)]

    for (const match of matches) {
      if (match.index !== undefined && match[1] && match[2]) {
        const replacement = match[1] // Keep only the Russian part
        corrections.push({
          type: 'contextual',
          original: match[0],
          corrected: replacement,
          position: {start: match.index, end: match.index + match[0].length},
          confidence: 0.8,
          reason: 'Remove English segment after Russian sentence'
        })
      }
    }

    correctedText = correctedText.replace(englishAfterRussian, '$1')

    return {text: correctedText, corrections}
  }

  /**
   * Fix capitalization issues
   */
  private fixCapitalization(text: string): {text: string; corrections: CorrectionDetail[]} {
    let correctedText = text
    const corrections: CorrectionDetail[] = []

    // Capitalize after sentence endings
    const sentencePattern = /([.!?]\s+)([–∞-—è])/g
    const sentenceMatches = [...correctedText.matchAll(sentencePattern)]

    for (const match of sentenceMatches) {
      if (match.index !== undefined && match[1] && match[2]) {
        const original = match[0]
        const corrected = match[1] + match[2].toUpperCase()

        corrections.push({
          type: 'pattern',
          original,
          corrected,
          position: {start: match.index, end: match.index + original.length},
          confidence: 0.9,
          reason: 'Capitalize after sentence end'
        })
      }
    }

    correctedText = correctedText.replace(sentencePattern, (match, p1, p2) => p1 + p2.toUpperCase())

    // Capitalize sentence beginning
    if (correctedText.length > 0 && /[–∞-—è]/.test(correctedText[0])) {
      const original = correctedText[0]
      const corrected = correctedText[0].toUpperCase()

      if (original !== corrected) {
        corrections.push({
          type: 'pattern',
          original,
          corrected,
          position: {start: 0, end: 1},
          confidence: 0.9,
          reason: 'Capitalize sentence beginning'
        })

        correctedText = corrected + correctedText.slice(1)
      }
    }

    return {text: correctedText, corrections}
  }

  /**
   * Update configuration
   */
  updateConfig(newConfig: Partial<RussianCorrectionConfig>): void {
    this.config = {...this.config, ...newConfig}
    console.log('üîß Russian transcription corrector configuration updated:', newConfig)
  }

  /**
   * Add custom corrections to dictionary
   */
  addCustomCorrections(corrections: Map<string, string>): void {
    if (!this.config.customDictionary) {
      this.config.customDictionary = new Map()
    }

    for (const [incorrect, correct] of corrections) {
      this.config.customDictionary.set(incorrect, correct)
    }

    console.log(`üìö Added ${corrections.size} custom corrections to dictionary`)
  }

  /**
   * Get current configuration
   */
  getConfig(): RussianCorrectionConfig {
    return {...this.config}
  }

  /**
   * Get dictionary statistics
   */
  getStats(): {
    properNames: number
    technicalTerms: number
    patterns: number
    contextualRules: number
    customTerms: number
  } {
    return {
      properNames: this.properNameDictionary.size,
      technicalTerms: this.technicalTermDictionary.size,
      patterns: this.commonPatterns.length,
      contextualRules: this.contextualRules.length,
      customTerms: this.config.customDictionary?.size || 0
    }
  }
}

/**
 * Factory function to create a Russian transcription corrector with optimal defaults
 */
export function createRussianTranscriptionCorrector(
  customConfig: Partial<RussianCorrectionConfig> = {}
): RussianTranscriptionCorrector {
  const russianOptimizedDefaults: Partial<RussianCorrectionConfig> = {
    enableProperNameCorrection: true,
    enableTechnicalTermCorrection: true,
    enableContextualSpelling: true,
    enableGrammarCorrection: true,
    enableCommonPatternFixes: true,
    confidenceThreshold: 0.7
  }

  return new RussianTranscriptionCorrector({
    ...russianOptimizedDefaults,
    ...customConfig
  })
}

export default RussianTranscriptionCorrector
