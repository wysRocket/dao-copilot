/**\n * Performance Monitor Dashboard Component\n * \n * Provides real-time performance monitoring visualization\n * for WebSocket connections, memory usage, and system metrics.\n */\n\nimport React, { useState, useEffect, useRef, useCallback } from 'react'\nimport { cn } from '../utils/tailwind'\nimport { usePerformanceMonitor } from '../hooks/usePerformanceMonitor'\nimport useWebSocketOptimized from '../hooks/useWebSocketOptimized'\nimport GlassCard from './GlassCard'\nimport { GlassButton } from './GlassButton'\nimport LoadingSpinner from './LoadingSpinner'\n\nexport interface PerformanceMonitorProps {\n  /** Whether to show the performance monitor */\n  show: boolean\n  /** Compact mode for smaller displays */\n  compact?: boolean\n  /** Show detailed metrics */\n  showDetails?: boolean\n  /** Enable auto-refresh */\n  autoRefresh?: boolean\n  /** Refresh interval in milliseconds */\n  refreshInterval?: number\n  /** WebSocket URL for monitoring */\n  webSocketUrl?: string\n  /** Custom CSS classes */\n  className?: string\n  /** Theme variant */\n  theme?: 'light' | 'dark' | 'glass'\n  /** Callback when critical performance issue detected */\n  onPerformanceAlert?: (alert: PerformanceAlert) => void\n}\n\nexport interface PerformanceAlert {\n  type: 'memory' | 'latency' | 'connection' | 'error'\n  severity: 'low' | 'medium' | 'high' | 'critical'\n  message: string\n  value?: number\n  threshold?: number\n  timestamp: number\n}\n\ninterface PerformanceChart {\n  labels: string[]\n  data: number[]\n  maxDataPoints: number\n}\n\n/**\n * Performance Monitor Dashboard Component\n */\nexport const PerformanceMonitorDashboard: React.FC<PerformanceMonitorProps> = ({\n  show,\n  compact = false,\n  showDetails = true,\n  autoRefresh = true,\n  refreshInterval = 1000,\n  webSocketUrl,\n  className,\n  theme = 'glass',\n  onPerformanceAlert\n}) => {\n  // Performance monitoring hook\n  const performanceMonitor = usePerformanceMonitor({\n    enableMemoryMonitoring: true,\n    enableWebSocketMonitoring: true,\n    alertThresholds: {\n      memoryUsage: 150 * 1024 * 1024, // 150MB\n      latency: 1500, // 1.5 seconds\n      errorRate: 0.1 // 10%\n    }\n  })\n\n  // WebSocket optimization (if URL provided)\n  const webSocketOptimized = useWebSocketOptimized({\n    url: webSocketUrl || '',\n    enableAutoOptimization: true,\n    performanceThreshold: 0.6,\n    latencyThreshold: 2000,\n    enablePerformanceLogging: false\n  })\n\n  // State\n  const [isExpanded, setIsExpanded] = useState(!compact)\n  const [selectedTab, setSelectedTab] = useState<'overview' | 'websocket' | 'memory' | 'alerts'>('overview')\n  const [alerts, setAlerts] = useState<PerformanceAlert[]>([])\n  const [isMonitoring, setIsMonitoring] = useState(false)\n\n  // Charts data\n  const [memoryChart, setMemoryChart] = useState<PerformanceChart>({\n    labels: [],\n    data: [],\n    maxDataPoints: compact ? 20 : 60\n  })\n  const [latencyChart, setLatencyChart] = useState<PerformanceChart>({\n    labels: [],\n    data: [],\n    maxDataPoints: compact ? 20 : 60\n  })\n  const [throughputChart, setThroughputChart] = useState<PerformanceChart>({\n    labels: [],\n    data: [],\n    maxDataPoints: compact ? 20 : 60\n  })\n\n  // Refs\n  const refreshTimer = useRef<NodeJS.Timeout | null>(null)\n  const alertsRef = useRef<PerformanceAlert[]>([])\n\n  // Start/stop monitoring\n  useEffect(() => {\n    if (show && autoRefresh) {\n      setIsMonitoring(true)\n      performanceMonitor.startMonitoring({\n        componentName: 'PerformanceMonitorDashboard'\n      })\n      \n      if (webSocketUrl) {\n        webSocketOptimized.connect().catch(console.error)\n      }\n    } else {\n      setIsMonitoring(false)\n      performanceMonitor.stopMonitoring()\n      \n      if (webSocketUrl) {\n        webSocketOptimized.disconnect()\n      }\n    }\n\n    return () => {\n      performanceMonitor.stopMonitoring()\n      if (webSocketUrl) {\n        webSocketOptimized.disconnect()\n      }\n    }\n  }, [show, autoRefresh, webSocketUrl])\n\n  // Update charts and check for alerts\n  useEffect(() => {\n    if (!isMonitoring) return\n\n    const updateMetrics = () => {\n      const now = new Date()\n      const timeLabel = now.toLocaleTimeString()\n      const metrics = performanceMonitor.getMetrics()\n      const wsMetrics = webSocketOptimized.metrics\n\n      // Update memory chart\n      setMemoryChart(prev => {\n        const newData = [...prev.data, metrics.memoryUsage / (1024 * 1024)] // Convert to MB\n        const newLabels = [...prev.labels, timeLabel]\n        \n        if (newData.length > prev.maxDataPoints) {\n          newData.shift()\n          newLabels.shift()\n        }\n        \n        return { ...prev, data: newData, labels: newLabels }\n      })\n\n      // Update latency chart (if WebSocket is available)\n      if (wsMetrics) {\n        setLatencyChart(prev => {\n          const newData = [...prev.data, wsMetrics.currentLatency]\n          const newLabels = [...prev.labels, timeLabel]\n          \n          if (newData.length > prev.maxDataPoints) {\n            newData.shift()\n            newLabels.shift()\n          }\n          \n          return { ...prev, data: newData, labels: newLabels }\n        })\n\n        setThroughputChart(prev => {\n          const newData = [...prev.data, wsMetrics.messageThroughput]\n          const newLabels = [...prev.labels, timeLabel]\n          \n          if (newData.length > prev.maxDataPoints) {\n            newData.shift()\n            newLabels.shift()\n          }\n          \n          return { ...prev, data: newData, labels: newLabels }\n        })\n      }\n\n      // Check for performance alerts\n      checkPerformanceAlerts(metrics, wsMetrics)\n    }\n\n    updateMetrics()\n    refreshTimer.current = setInterval(updateMetrics, refreshInterval)\n\n    return () => {\n      if (refreshTimer.current) {\n        clearInterval(refreshTimer.current)\n      }\n    }\n  }, [isMonitoring, refreshInterval])\n\n  // Check for performance alerts\n  const checkPerformanceAlerts = useCallback((metrics: any, wsMetrics: any) => {\n    const newAlerts: PerformanceAlert[] = []\n    const now = Date.now()\n\n    // Memory alert\n    if (metrics.memoryUsage > 150 * 1024 * 1024) { // 150MB\n      newAlerts.push({\n        type: 'memory',\n        severity: metrics.memoryUsage > 250 * 1024 * 1024 ? 'critical' : 'high',\n        message: `High memory usage: ${(metrics.memoryUsage / (1024 * 1024)).toFixed(1)}MB`,\n        value: metrics.memoryUsage,\n        threshold: 150 * 1024 * 1024,\n        timestamp: now\n      })\n    }\n\n    // WebSocket alerts\n    if (wsMetrics) {\n      if (wsMetrics.currentLatency > 2000) {\n        newAlerts.push({\n          type: 'latency',\n          severity: wsMetrics.currentLatency > 5000 ? 'critical' : 'high',\n          message: `High latency: ${wsMetrics.currentLatency}ms`,\n          value: wsMetrics.currentLatency,\n          threshold: 2000,\n          timestamp: now\n        })\n      }\n\n      if (wsMetrics.connectionQuality === 'poor') {\n        newAlerts.push({\n          type: 'connection',\n          severity: 'medium',\n          message: 'Poor connection quality detected',\n          timestamp: now\n        })\n      }\n    }\n\n    // Add new alerts and notify\n    if (newAlerts.length > 0) {\n      setAlerts(prev => {\n        const combined = [...prev, ...newAlerts]\n        // Keep only last 50 alerts\n        return combined.slice(-50)\n      })\n      \n      newAlerts.forEach(alert => {\n        onPerformanceAlert?.(alert)\n      })\n    }\n  }, [onPerformanceAlert])\n\n  // Clear alerts\n  const clearAlerts = useCallback(() => {\n    setAlerts([])\n  }, [])\n\n  // Toggle expansion\n  const toggleExpanded = useCallback(() => {\n    setIsExpanded(!isExpanded)\n  }, [isExpanded])\n\n  // Format bytes\n  const formatBytes = (bytes: number) => {\n    if (bytes === 0) return '0 B'\n    const k = 1024\n    const sizes = ['B', 'KB', 'MB', 'GB']\n    const i = Math.floor(Math.log(bytes) / Math.log(k))\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i]\n  }\n\n  // Format percentage\n  const formatPercentage = (value: number) => {\n    return `${(value * 100).toFixed(1)}%`\n  }\n\n  // Get metrics\n  const metrics = performanceMonitor.getMetrics()\n  const wsMetrics = webSocketOptimized.metrics\n\n  // Theme classes\n  const themeClasses = {\n    light: 'bg-white text-gray-900 border-gray-200',\n    dark: 'bg-gray-800 text-white border-gray-600',\n    glass: 'glass-morphism text-white border-white/20'\n  }[theme]\n\n  if (!show) return null\n\n  return (\n    <div className={cn(\n      'performance-monitor',\n      'fixed bottom-4 right-4 z-50',\n      compact && !isExpanded ? 'w-80' : 'w-96',\n      themeClasses,\n      'rounded-lg border shadow-lg backdrop-blur-lg',\n      className\n    )}>\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-3 border-b border-white/10\">\n        <div className=\"flex items-center space-x-2\">\n          <div className={cn(\n            'w-2 h-2 rounded-full',\n            isMonitoring ? 'bg-green-400 animate-pulse' : 'bg-gray-400'\n          )} />\n          <h3 className=\"text-sm font-medium\">\n            Performance Monitor\n          </h3>\n        </div>\n        \n        <div className=\"flex items-center space-x-2\">\n          {alerts.length > 0 && (\n            <div className=\"flex items-center space-x-1 text-yellow-400\">\n              <svg className=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path fillRule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n              </svg>\n              <span className=\"text-xs\">{alerts.length}</span>\n            </div>\n          )}\n          \n          <GlassButton\n            onClick={toggleExpanded}\n            className=\"text-xs p-1\"\n          >\n            {isExpanded ? '−' : '+'}\n          </GlassButton>\n        </div>\n      </div>\n\n      {/* Content */}\n      {isExpanded && (\n        <div className=\"p-3\">\n          {/* Tabs */}\n          <div className=\"flex space-x-1 mb-3\">\n            {['overview', 'websocket', 'memory', 'alerts'].map(tab => (\n              <button\n                key={tab}\n                onClick={() => setSelectedTab(tab as any)}\n                className={cn(\n                  'px-3 py-1 text-xs rounded-lg transition-all',\n                  selectedTab === tab\n                    ? 'bg-white/20 text-white'\n                    : 'text-white/60 hover:text-white/80'\n                )}\n              >\n                {tab.charAt(0).toUpperCase() + tab.slice(1)}\n                {tab === 'alerts' && alerts.length > 0 && (\n                  <span className=\"ml-1 bg-yellow-400 text-black text-xs px-1 rounded-full\">\n                    {alerts.length}\n                  </span>\n                )}\n              </button>\n            ))}\n          </div>\n\n          {/* Tab Content */}\n          <div className=\"space-y-3\">\n            {selectedTab === 'overview' && (\n              <div className=\"grid grid-cols-2 gap-2 text-xs\">\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-white/60\">Memory:</span>\n                    <span>{formatBytes(metrics.memoryUsage)}</span>\n                  </div>\n                  {metrics.renderTime && (\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-white/60\">Render:</span>\n                      <span>{metrics.renderTime.toFixed(1)}ms</span>\n                    </div>\n                  )}\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-white/60\">Status:</span>\n                    <span className={isMonitoring ? 'text-green-400' : 'text-yellow-400'}>\n                      {isMonitoring ? 'Active' : 'Paused'}\n                    </span>\n                  </div>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  {wsMetrics && (\n                    <>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-white/60\">WS Latency:</span>\n                        <span>{wsMetrics.currentLatency}ms</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-white/60\">WS Quality:</span>\n                        <span className={cn(\n                          wsMetrics.connectionQuality === 'excellent' ? 'text-green-400' :\n                          wsMetrics.connectionQuality === 'good' ? 'text-blue-400' :\n                          wsMetrics.connectionQuality === 'fair' ? 'text-yellow-400' :\n                          'text-red-400'\n                        )}>\n                          {wsMetrics.connectionQuality}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-white/60\">Performance:</span>\n                        <span>{formatPercentage(wsMetrics.overallPerformance)}</span>\n                      </div>\n                    </>\n                  )}\n                </div>\n              </div>\n            )}\n\n            {selectedTab === 'websocket' && wsMetrics && (\n              <div className=\"space-y-3 text-xs\">\n                <div className=\"grid grid-cols-2 gap-2\">\n                  <div className=\"space-y-1\">\n                    <div className=\"text-white/60 text-xs mb-1\">Connection</div>\n                    <div>Status: {webSocketOptimized.connectionState.status}</div>\n                    <div>Reconnects: {wsMetrics.reconnectionCount}</div>\n                    <div>Uptime: {Math.floor(wsMetrics.connectionUptime / 1000)}s</div>\n                  </div>\n                  <div className=\"space-y-1\">\n                    <div className=\"text-white/60 text-xs mb-1\">Messages</div>\n                    <div>Sent: {wsMetrics.messagesSent}</div>\n                    <div>Received: {wsMetrics.messagesReceived}</div>\n                    <div>Throughput: {wsMetrics.messageThroughput.toFixed(1)}/s</div>\n                  </div>\n                </div>\n                \n                {/* Simple charts */}\n                <div className=\"space-y-2\">\n                  <div>\n                    <div className=\"text-white/60 text-xs mb-1\">Latency Trend</div>\n                    <div className=\"h-8 bg-white/10 rounded flex items-end space-x-px overflow-hidden\">\n                      {latencyChart.data.slice(-20).map((value, index) => {\n                        const height = Math.max(2, Math.min(32, (value / 3000) * 32))\n                        return (\n                          <div\n                            key={index}\n                            className=\"bg-blue-400 flex-1 min-w-0\"\n                            style={{ height: `${height}px` }}\n                          />\n                        )\n                      })}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {selectedTab === 'memory' && (\n              <div className=\"space-y-3 text-xs\">\n                <div className=\"grid grid-cols-2 gap-2\">\n                  <div>Current: {formatBytes(metrics.memoryUsage)}</div>\n                  <div>Peak: {formatBytes(metrics.peakMemoryUsage || metrics.memoryUsage)}</div>\n                </div>\n                \n                <div>\n                  <div className=\"text-white/60 text-xs mb-1\">Memory Usage Trend</div>\n                  <div className=\"h-8 bg-white/10 rounded flex items-end space-x-px overflow-hidden\">\n                    {memoryChart.data.slice(-20).map((value, index) => {\n                      const height = Math.max(2, Math.min(32, (value / 500) * 32)) // Scale to 500MB max\n                      return (\n                        <div\n                          key={index}\n                          className={cn(\n                            'flex-1 min-w-0',\n                            value > 200 ? 'bg-red-400' :\n                            value > 100 ? 'bg-yellow-400' : 'bg-green-400'\n                          )}\n                          style={{ height: `${height}px` }}\n                        />\n                      )\n                    })}\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {selectedTab === 'alerts' && (\n              <div className=\"space-y-2\">\n                {alerts.length === 0 ? (\n                  <div className=\"text-center py-4 text-white/60 text-xs\">\n                    No alerts\n                  </div>\n                ) : (\n                  <div className=\"space-y-2 max-h-32 overflow-y-auto\">\n                    {alerts.slice(-10).reverse().map((alert, index) => (\n                      <div\n                        key={`${alert.timestamp}-${index}`}\n                        className={cn(\n                          'p-2 rounded text-xs border-l-2',\n                          alert.severity === 'critical' ? 'bg-red-500/20 border-red-500' :\n                          alert.severity === 'high' ? 'bg-orange-500/20 border-orange-500' :\n                          alert.severity === 'medium' ? 'bg-yellow-500/20 border-yellow-500' :\n                          'bg-blue-500/20 border-blue-500'\n                        )}\n                      >\n                        <div className=\"font-medium\">{alert.message}</div>\n                        <div className=\"text-white/60 text-xs\">\n                          {new Date(alert.timestamp).toLocaleTimeString()}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n                \n                {alerts.length > 0 && (\n                  <div className=\"text-center\">\n                    <GlassButton\n                      onClick={clearAlerts}\n                      className=\"text-xs\"\n                    >\n                      Clear Alerts\n                    </GlassButton>\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default PerformanceMonitorDashboard