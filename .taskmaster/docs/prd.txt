# Live Streaming Transcription Refactor - Product Requirements Document

## Project Overview
Refactor and fix the live streaming transcription system in dao-copilot to provide real-time audio transcription with immediate visual feedback and proper session management.

## Current Problems
1. **30-second delay**: Transcription only appears after 30 seconds due to competing transcription services
2. **Text overwriting**: Final transcription immediately overwrites streaming text instead of staying visible
3. **Multiple competing services**: EnhancedAudioRecordingService, interval-based service, and WebSocket streaming conflict
4. **Poor session management**: Streaming sessions are created and destroyed inconsistently
5. **Complex service architecture**: Too many overlapping transcription systems causing confusion

## Core Requirements

### 1. Immediate Transcription Display
- **Real-time streaming**: Text should appear within 1-2 seconds of speaking
- **Progressive display**: Show partial results as user speaks, then final results
- **No 30-second delays**: Eliminate batch processing delays
- **Visual feedback**: Clear indication of streaming vs final transcription state

### 2. Proper Session Management
- **Session lifecycle**: Clear start/stop/update flow for streaming sessions
- **State consistency**: Single source of truth for streaming state
- **Session persistence**: Final transcription stays visible until manually cleared
- **Error handling**: Graceful fallback when streaming fails

### 3. Unified Audio Service Architecture
- **Single audio service**: Consolidate to one primary transcription service
- **Clean interfaces**: Clear separation between audio capture and transcription
- **Service abstraction**: Abstract transcription backends (WebSocket, batch, etc.)
- **Configuration management**: Centralized audio/transcription settings

### 4. Event System Refactor
- **Standardized events**: Consistent streaming event format across services
- **Event flow optimization**: Direct communication between audio service and UI
- **Debug visibility**: Comprehensive logging for troubleshooting
- **Performance monitoring**: Track transcription latency and accuracy

## Technical Architecture

### Audio Service Layer
- **Primary Service**: EnhancedAudioRecordingService with real-time configuration
- **Fallback Strategy**: Graceful degradation to batch processing if real-time fails
- **Audio Processing**: Optimized buffer sizes and chunk processing for low latency

### Transcription Management
- **Unified Manager**: Single TranscriptionStateManager handles all streaming state
- **Session Types**: Distinguish between streaming sessions and final transcripts
- **Result Processing**: Convert various transcription formats to standardized streaming events

### UI Components
- **StreamingTextRenderer**: Optimized for real-time text display
- **TranscriptsPage**: Clean streaming area with proper state management
- **RecordingControls**: Simplified start/stop with clear visual feedback

## Success Criteria
1. **Latency**: Transcription appears within 2 seconds of speaking
2. **Persistence**: Final transcription remains visible until manually cleared
3. **Reliability**: 95% success rate for streaming transcription start
4. **Performance**: No UI blocking during transcription processing
5. **User Experience**: Clear visual feedback for all transcription states

## Implementation Priority
1. **High**: Fix 30-second delay and text overwriting issues
2. **High**: Consolidate to single audio service architecture
3. **Medium**: Implement proper session lifecycle management
4. **Medium**: Add comprehensive error handling and fallbacks
5. **Low**: Performance optimizations and monitoring

## Technical Constraints
- Must work with existing Electron app architecture
- Compatible with current Gemini Live API integration
- Maintain backward compatibility with existing transcription storage
- Support both WebSocket and batch transcription modes
- Work across different audio input devices and quality levels