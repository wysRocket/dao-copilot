Title: Real-Time Transcription Reliability & Loss Elimination Initiative
Tag: transcription-reliability
Version: 1.0
Owner: Streaming Pipeline Team
Last-Updated: 2025-08-09

Objective
Eliminate partial/final transcript text loss, premature completion, duplication, and silent truncation during long-form (>5 min) continuous speech sessions using Gemini Live. Provide diagnostic observability and adaptive strategies to ensure >99.5% token retention and stable user-visible continuity.

Success Metrics
- Token Retention: >= 99.5% of characters compared to ground-truth reference (offline batch run) for 10-minute speech samples.
- Latency: Additional processing adds < 20ms P95 over current path.
- Premature Finalization Incidents: 0 during active speech (VAD / energy > threshold) across test set.
- Reset Recovery: After model length reset events, accumulated text divergence < 1.0% (Levenshtein) from ideal aggregation.
- Observability: Real-time panel shows length growth, reset events, guard status, and raw tail; exportable session diagnostics file.

Current Issues (Observed)
1. Early stream auto-complete due to fixed timeout not being extended by incoming partials (fixed, regression risk remains).
2. Severe losses: Long speech reducing to 1–N words (suspected overwrites after resets / guard pruning / diff-mode tokens).
3. Over-aggressive regression guard previously filtered legitimate short fragments (guard now disabled by default).
4. Model length resets (shrink >50%) causing accumulation to overwrite tail segments.
5. Lack of adaptive distinction: full-text replacement vs incremental diff emissions.
6. Limited post-session forensic artifact; difficult to compare with ground truth.
7. UI not yet surfacing diagnostics (panel component added but not wired/integrated into app layout and export flow).

Scope (In)
- Adaptive accumulation strategies (hybrid replace/append with overlap & reset heuristics)
- Dynamic regression guard enablement tied to reset frequency & false-positive mitigation
- Forensic session logging (structured JSON, optional compressed) and export button
- Offline comparison harness (playback recorded audio -> offline transcription -> diff vs live session) to measure retention
- UI diagnostics integration & controls (toggle guard, export logs, highlight resets)
- Resilience to diff-only token mode / late-arriving partial fragments
- Improved finalization reliability (ensure final always >= max of partial snapshots)

Scope (Out)
- Switching transcription provider
- Full-featured VAD redesign
- Multi-language translation pipeline
- Advanced semantic error correction (post-processing language model passes)

Constraints / Non-Goals
- Keep added memory bounded (caps & ring buffers) – < 5MB per 10-minute session for diagnostics.
- Avoid blocking UI thread; heavy diffing done off main via web worker if needed.

Key Risks
- Misclassification of diff-mode could create duplications.
- Excessive snapshotting may inflate memory.
- Export logs may contain PII (user speech); need redaction toggle.

High-Level Approach
A. Instrumentation Completion: Wire diagnostics panel, bridge + manager data feed, export facility.
B. Adaptive Strategy Layer: Detect reset/diff patterns -> choose merge policy (append, overlap-merge, or protected replacement).
C. Guard Orchestration: Enable regression guard only when reset rate exceeds threshold & disable automatically when stable.
D. Finalization Integrity: Reconcile final with max-length snapshot; never shrink.
E. Offline Validation Harness: Deterministic audio playback -> capture live & offline transcripts -> diff metrics.
F. Reporting & Telemetry: Aggregated counters (resets/min, shrink events averted, guard toggles, retention estimates).

Milestones
1. Diagnostics Integration & Export
2. Adaptive Detection Heuristics (diff vs full-text)
3. Merge Policy Implementation & Guard Automation
4. Finalization Safety & No-Shrink Enforcement
5. Offline Playback Harness & Retention Metric Pipeline
6. PII-Redactable Log Export & Session Report
7. Performance Optimization & Memory Bound Validation
8. Release Hardening & Documentation

Non-Functional Requirements
- Type-safe utilities (TS) with test coverage for merging & diff classification (>=90% lines in those modules).
- All new logic behind feature flag `enableAdaptiveTranscription`.

Testing Strategy Overview
- Unit: overlap merge, diff classifier, guard toggle state machine, no-shrink finalization.
- Integration: simulated reset streams, mixed diff/full sequences, long continuous (10 min) synthetic test.
- E2E: Automated harness feeding prerecorded audio; compare logs & ground truth.

Open Questions
- Do we need compression (gzip) for log export? (Default: yes, optional).
- Acceptable privacy model for raw partial storage? (Potential redaction by hashing words after export if flagged.)

Initial Task Quantity Guidance
Aim for 10–14 top-level tasks with structured subtasks for heuristics, harness, and UI.

Additional Notes
Use existing snapshots & raw partial buffers; avoid duplicating large string arrays—store incremental metadata (lengths, hashes) where possible.

END