# Task ID: 2
# Title: Implement WebSocket Connection Management
# Status: pending
# Dependencies: 1
# Priority: high
# Description: Create a service to manage WebSocket connections to the Google Gemini Live API.
# Details:
1. Create a `WebSocketManager` class in `src/services/WebSocketManager.ts`
2. Implement connection method using 'ws' library:
   ```typescript
   import WebSocket from 'ws';
   import { v4 as uuidv4 } from 'uuid';

   class WebSocketManager {
     private ws: WebSocket | null = null;
     private apiKey: string;
     private sessionId: string;

     constructor(apiKey: string) {
       this.apiKey = apiKey;
       this.sessionId = uuidv4();
     }

     connect() {
       const url = `wss://generativelanguage.googleapis.com/ws/google.ai.generativelanguage.v1alpha.GenerativeService.BidiGenerateContent?key=${this.apiKey}`;
       this.ws = new WebSocket(url);

       this.ws.on('open', this.onOpen.bind(this));
       this.ws.on('message', this.onMessage.bind(this));
       this.ws.on('error', this.onError.bind(this));
       this.ws.on('close', this.onClose.bind(this));
     }

     // Implement other methods (onOpen, onMessage, onError, onClose)
   }
   ```
3. Implement proper API key authentication
4. Add connection state monitoring
5. Implement graceful termination method

# Test Strategy:
1. Unit test for successful connection establishment
2. Mock WebSocket server to test connection events
3. Test API key authentication
4. Verify connection state monitoring
5. Test graceful termination
