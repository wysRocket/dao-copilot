# Task ID: 9
# Title: Implement Service Integration
# Status: pending
# Dependencies: 2, 3, 4, 6, 7
# Priority: high
# Description: Integrate the new WebSocket implementation with existing services and ensure compatibility.
# Details:
1. Create an integration layer in `src/services/GeminiService.ts`:
   ```typescript
   import { WebSocketManager } from './WebSocketManager';
   import { MessageHandler } from './MessageHandler';

   class GeminiService {
     private wsManager: WebSocketManager;
     private messageHandler: MessageHandler;

     constructor() {
       this.wsManager = new WebSocketManager(process.env.GEMINI_API_KEY!);
       this.messageHandler = new MessageHandler(this.wsManager);
     }

     async initialize() {
       await this.wsManager.connect();
       // Additional setup
     }

     async sendMessage(message: string) {
       return this.messageHandler.enqueue(message);
     }

     // Additional methods for different types of interactions
   }
   ```
2. Update existing services to use the new `GeminiService`
3. Ensure model consistency across all services
4. Integrate with existing audio capture and processing pipeline
5. Update UI components to work with the new WebSocket implementation

# Test Strategy:
1. Integration tests for GeminiService
2. End-to-end tests with UI components
3. Verify model consistency across services
4. Test compatibility with existing audio pipeline
5. Regression testing on existing features
