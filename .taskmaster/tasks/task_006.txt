# Task ID: 6
# Title: Implement Model Configuration and Setup Messages
# Status: pending
# Dependencies: 2, 3, 4
# Priority: high
# Description: Configure the gemini-live-2.5-flash-preview model and implement proper setup messages.
# Details:
1. Create a `ModelConfig` class in `src/utils/ModelConfig.ts`:
   ```typescript
   class ModelConfig {
     static getSetupMessage() {
       return {
         setup: {
           model: 'models/gemini-live-2.5-flash-preview',
           generationConfig: {
             responseModalities: ['TEXT', 'AUDIO']
           },
           sessionResumption: true
         }
       };
     }
   }
   ```
2. Integrate `ModelConfig` with `WebSocketManager`:
   ```typescript
   import { ModelConfig } from '../utils/ModelConfig';

   class WebSocketManager {
     // ...

     private sendSetupMessage() {
       const setupMessage = ModelConfig.getSetupMessage();
       this.ws.send(JSON.stringify(setupMessage));
     }
   }
   ```
3. Ensure model configuration is consistent across all services
4. Implement logic to handle model-specific responses
5. Add validation for model-specific parameters

# Test Strategy:
1. Unit tests for ModelConfig class
2. Verify setup message structure and content
3. Test integration with WebSocketManager
4. Ensure model consistency across different parts of the application
5. Test handling of model-specific responses
