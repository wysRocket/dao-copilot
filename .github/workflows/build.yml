name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., 1.0.0)'
        required: true
        default: '1.0.0'
      prerelease:
        description: 'Mark as pre-release'
        type: boolean
        default: false
  workflow_call:
    inputs:
      version:
        description: 'Version to build'
        required: false
        type: string
        default: '1.0.0'
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  actions: read

env:
  ELECTRON_CACHE: ${{ github.workspace }}/.electron-cache
  ELECTRON_BUILDER_CACHE: ${{ github.workspace }}/.electron-builder-cache

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup Python (for node-gyp)
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libnss3-dev libatk-bridge2.0-dev libgtk-3-dev libxss1 libasound2-dev

      - name: Cache Electron
        uses: actions/cache@v4
        with:
          path: ${{ env.ELECTRON_CACHE }}
          key: electron-cache-${{ matrix.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            electron-cache-${{ matrix.os }}-

      - name: Cache Electron Builder
        uses: actions/cache@v4
        with:
          path: ${{ env.ELECTRON_BUILDER_CACHE }}
          key: electron-builder-cache-${{ matrix.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            electron-builder-cache-${{ matrix.os }}-

      - name: Run tests
        run: npm run test

      - name: Build application
        run: npm run make
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CSC_IDENTITY_AUTO_DISCOVERY: false

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}
          path: |
            out/make/**/*
            !out/make/**/*.blockmap
          retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Display structure of downloaded files
        run: ls -la ./artifacts

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name || github.event.inputs.version }}
          release_name: Release ${{ github.ref_name || github.event.inputs.version }}
          body: |
            ## What's Changed
            - Automated release build
            - Cross-platform builds for Windows, macOS, and Linux

            ## Download
            Choose the appropriate installer for your platform:
            - **Windows**: `.exe` installer
            - **macOS**: `.dmg` installer  
            - **Linux**: `.AppImage`, `.deb`, or `.snap`

            ## Installation
            1. Download the installer for your platform
            2. Run the installer and follow the setup wizard
            3. Launch the application from your applications folder/menu
          draft: false
          prerelease: ${{ github.event.inputs.prerelease || false }}

      - name: Upload Release Assets
        run: |
          for file in ./artifacts/build-*/*; do
            if [ -f "$file" ]; then
              echo "Uploading $file"
              curl -X POST \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Content-Type: application/octet-stream" \
                --data-binary @"$file" \
                "${{ steps.create_release.outputs.upload_url }}=$(basename "$file")"
            fi
          done
